[
    "* [meta-rockchip][kirkstone][PATCH] bsp: rkbin: fix default COMPATIBLE_MACHINE matching all\n@ 2023-10-16 11:22 Quentin Schulz\n  2023-10-16 15:27 ` [yocto] Using cmake... how? Dave Hitchman\n  0 siblings, 1 reply; 15+ messages in thread\nFrom: Quentin Schulz @ 2023-10-16 11:22 UTC (permalink / raw)\n  To: twoerner; +Cc: yocto, Quentin Schulz, Quentin Schulz\n\nFrom: Quentin Schulz <quentin.schulz@theobroma-systems.com>\n\nThe goal of the default COMPATIBLE_MACHINE was to not allow\nrockchip-rkbin to be even parsed if a MACHINE isn't part of the\nCOMPATIBLE_MACHINE.\n\nHowever, COMPATIBLE_MACHINE is a regexp checked using Python's re module\napproximately like:\n\"\"\"\nif re.match(COMPATIBLE_MACHINE, MACHINE):\n\treturn True\n\"\"\"\n\nand re.match() returns a match whatever MACHINE is if COMPATIBLE_MACHINE\nis the empty string.\n\nTherefore, let's change it to `^$` which only matches the empty string,\nwhich shouldn't be possible for anything in MACHINEOVERRIDES, and if it\nis there are probably bigger problems than parsing rockchip-rkbin.\n\nFixes: 3c7f532c2e25 (\"rk3588(s): add\")\nCc: Quentin Schulz <foss+yocto@0leil.net>\nSigned-off-by: Quentin Schulz <quentin.schulz@theobroma-systems.com>\n---\n recipes-bsp/rkbin/rockchip-rkbin_git.bb | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ndiff --git a/recipes-bsp/rkbin/rockchip-rkbin_git.bb b/recipes-bsp/rkbin/rockchip-rkbin_git.bb\nindex 7fefb01..f9e680d 100644\n--- a/recipes-bsp/rkbin/rockchip-rkbin_git.bb\n+++ b/recipes-bsp/rkbin/rockchip-rkbin_git.bb\n@@ -12,7 +12,7 @@ inherit bin_package deploy\n \n S = \"${WORKDIR}/git\"\n \n-COMPATIBLE_MACHINE = \"\"\n+COMPATIBLE_MACHINE = \"^$\"\n COMPATIBLE_MACHINE:rk3588s = \"rk3588s\"\n \n PACKAGE_ARCH = \"${MACHINE_ARCH}\"\n-- \n2.41.0\n\n\n\n^ permalink raw reply related\t[flat|nested] 15+ messages in thread",
    "* [yocto] Using cmake... how?\n  2023-10-16 11:22 [meta-rockchip][kirkstone][PATCH] bsp: rkbin: fix default COMPATIBLE_MACHINE matching all Quentin Schulz\n@ 2023-10-16 15:27 ` Dave Hitchman\n  2023-10-16 19:48   ` Khem Raj\n  2023-10-17  5:49   ` Mikko Rapeli\n  0 siblings, 2 replies; 15+ messages in thread\nFrom: Dave Hitchman @ 2023-10-16 15:27 UTC (permalink / raw)\n  To: yocto\n\n[-- Attachment #1: Type: text/plain, Size: 1000 bytes --]\n\nSo my current recipe for the project works, including building various C, C++ files\nI wanted to now add a library of someone elses creation.\nOn my machine this library builds using the tools installed so the code is ok\n\nI added a recipe to my yocto build and it attempts to do the cmake.\n\nUnfortunately whatever I have tried over 2 days cmake insists:\n\n  1.  On using the from my machine NOT the cross compiling tool set the rest of the yocto build uses.\n| -- The CXX compiler identification is GNU 9.4.0\n| -- The C compiler identification is GNU 9.4.0\n  2.\nGetting upset about the flags passed in:\n|     g++: warning: ‘-mcpu=’ is deprecated; use ‘-mtune=’ or ‘-march=’ instead\n|     cc1plus: error: bad value (‘armv8-a+crc+crypto’) for ‘-march=’ switch\nI cant even find where these flags are actually set, where I found them and thought they were set I altered them to be FRED and nothing changed in the errors at all.\n\nAny idea? Surely it should be pretty easy?\n\nthanks\nDave\n\n\n[-- Attachment #2: Type: text/html, Size: 3707 bytes --]\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-16 15:27 ` [yocto] Using cmake... how? Dave Hitchman\n@ 2023-10-16 19:48   ` Khem Raj\n  2023-10-17  5:49   ` Mikko Rapeli\n  1 sibling, 0 replies; 15+ messages in thread\nFrom: Khem Raj @ 2023-10-16 19:48 UTC (permalink / raw)\n  To: Dave Hitchman; +Cc: yocto\n\nOn Mon, Oct 16, 2023 at 8:27 AM Dave Hitchman <dave.hitchman@kymati.com> wrote:\n>\n> So my current recipe for the project works, including building various C, C++ files\n> I wanted to now add a library of someone elses creation.\n> On my machine this library builds using the tools installed so the code is ok\n>\n> I added a recipe to my yocto build and it attempts to do the cmake.\n>\n> Unfortunately whatever I have tried over 2 days cmake insists:\n>\n> On using the from my machine NOT the cross compiling tool set the rest of the yocto build uses.\n> | -- The CXX compiler identification is GNU 9.4.0\n> | -- The C compiler identification is GNU 9.4.0\n> Getting upset about the flags passed in:\n> |     g++: warning: ‘-mcpu=’ is deprecated; use ‘-mtune=’ or ‘-march=’ instead\n> |     cc1plus: error: bad value (‘armv8-a+crc+crypto’) for ‘-march=’ switch\n> I cant even find where these flags are actually set, where I found them and thought they were set I altered them to be FRED and nothing changed in the errors at all.\n>\n>\n> Any idea? Surely it should be pretty easy?\n\nshare your recipe and also any peculiarities in CMake files in this library\n\n>\n> thanks\n> Dave\n>\n>\n> -=-=-=-=-=-=-=-=-=-=-=-\n> Links: You receive all messages sent to this group.\n> You automatically follow any topics you start or reply to.\n> View/Reply Online (#61346): https://lists.yoctoproject.org/g/yocto/message/61346\n> Mute This Topic: https://lists.yoctoproject.org/mt/101998042/1997914\n> Group Owner: yocto+owner@lists.yoctoproject.org\n> Unsubscribe: https://lists.yoctoproject.org/g/yocto/unsub [raj.khem@gmail.com]\n> -=-=-=-=-=-=-=-=-=-=-=-\n>\n\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-16 15:27 ` [yocto] Using cmake... how? Dave Hitchman\n  2023-10-16 19:48   ` Khem Raj\n@ 2023-10-17  5:49   ` Mikko Rapeli\n  2023-10-17  9:21     ` Dave Hitchman\n  1 sibling, 1 reply; 15+ messages in thread\nFrom: Mikko Rapeli @ 2023-10-17  5:49 UTC (permalink / raw)\n  To: Dave Hitchman; +Cc: yocto\n\nHi,\n\nOn Mon, Oct 16, 2023 at 03:27:01PM +0000, Dave Hitchman wrote:\n> So my current recipe for the project works, including building various C, C++ files\n> I wanted to now add a library of someone elses creation.\n> On my machine this library builds using the tools installed so the code is ok\n> \n> I added a recipe to my yocto build and it attempts to do the cmake.\n> \n> Unfortunately whatever I have tried over 2 days cmake insists:\n> \n>   1.  On using the from my machine NOT the cross compiling tool set the rest of the yocto build uses.\n> | -- The CXX compiler identification is GNU 9.4.0\n> | -- The C compiler identification is GNU 9.4.0\n>   2.\n> Getting upset about the flags passed in:\n> |     g++: warning: ‘-mcpu=’ is deprecated; use ‘-mtune=’ or ‘-march=’ instead\n> |     cc1plus: error: bad value (‘armv8-a+crc+crypto’) for ‘-march=’ switch\n> I cant even find where these flags are actually set, where I found them and thought they were set I altered them to be FRED and nothing changed in the errors at all.\n> \n> Any idea? Surely it should be pretty easy?\n\n\"inherit cmake\" in the recipe and then fix the CMake scripts to use variables from\nthe toolchain file and only append to them. Same problems in all build tools. CMake\nadds several abstractions on top though so finding out the details may be tricky.\nSee the toolchain.cmake file in recipe build directory. If this is not followed\nwrong compiler can be used, with wrong flags, using wrong binary, module and header file\nsearch paths...\n\nCheers,\n\n-Mikko\n\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17  5:49   ` Mikko Rapeli\n@ 2023-10-17  9:21     ` Dave Hitchman\n  2023-10-17  9:52       ` Mikko Rapeli\n  0 siblings, 1 reply; 15+ messages in thread\nFrom: Dave Hitchman @ 2023-10-17  9:21 UTC (permalink / raw)\n  To: Mikko Rapeli; +Cc: yocto\n\n[-- Attachment #1: Type: text/plain, Size: 3187 bytes --]\n\nOh I dont know. This is getting to be a bit annoying.\nI had already included the inherit cmake line but now it seems maybe that you dont need to put any cmake commands in... not 100% sure, no one seems to explain this, I am not convinced.\nHowever I want some extra flags and I have read that you should be able to:\nTARGET_CFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n\nbut building that gives me\n+ cd /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/build\n+ do_configure\n+ cd /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/git\n+ TARGET_CFLAGS:=-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\n\n/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/temp/run.do_configure.991537: 159: TARGET_CFLAGS:=-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON: not found\n\n\nIs there a good, really works, actually sets extra flags, really shows and explains with comments and everything example I can look at?  This bitbake is clearly clever, so is cmake, but in honesty I really gave up trying to understand any of it and just want it to work, writing the code is one thing but these build systems are a fight all of their own that takes longer than the code to solve the universe\n________________________________\nFrom: Mikko Rapeli <mikko.rapeli@linaro.org>\nSent: 17 October 2023 07:49\nTo: Dave Hitchman <dave.hitchman@kymati.com>\nCc: yocto@lists.yoctoproject.org <yocto@lists.yoctoproject.org>\nSubject: Re: [yocto] Using cmake... how?\n\nHi,\n\nOn Mon, Oct 16, 2023 at 03:27:01PM +0000, Dave Hitchman wrote:\n> So my current recipe for the project works, including building various C, C++ files\n> I wanted to now add a library of someone elses creation.\n> On my machine this library builds using the tools installed so the code is ok\n>\n> I added a recipe to my yocto build and it attempts to do the cmake.\n>\n> Unfortunately whatever I have tried over 2 days cmake insists:\n>\n>   1.  On using the from my machine NOT the cross compiling tool set the rest of the yocto build uses.\n> | -- The CXX compiler identification is GNU 9.4.0\n> | -- The C compiler identification is GNU 9.4.0\n>   2.\n> Getting upset about the flags passed in:\n> |     g++: warning: ‘-mcpu=’ is deprecated; use ‘-mtune=’ or ‘-march=’ instead\n> |     cc1plus: error: bad value (‘armv8-a+crc+crypto’) for ‘-march=’ switch\n> I cant even find where these flags are actually set, where I found them and thought they were set I altered them to be FRED and nothing changed in the errors at all.\n>\n> Any idea? Surely it should be pretty easy?\n\n\"inherit cmake\" in the recipe and then fix the CMake scripts to use variables from\nthe toolchain file and only append to them. Same problems in all build tools. CMake\nadds several abstractions on top though so finding out the details may be tricky.\nSee the toolchain.cmake file in recipe build directory. If this is not followed\nwrong compiler can be used, with wrong flags, using wrong binary, module and header file\nsearch paths...\n\nCheers,\n\n-Mikko\n\n[-- Attachment #2: Type: text/html, Size: 7282 bytes --]\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17  9:21     ` Dave Hitchman\n@ 2023-10-17  9:52       ` Mikko Rapeli\n  2023-10-17 10:09         ` Dave Hitchman\n  0 siblings, 1 reply; 15+ messages in thread\nFrom: Mikko Rapeli @ 2023-10-17  9:52 UTC (permalink / raw)\n  To: Dave Hitchman; +Cc: yocto\n\nHi,\n\nOn Tue, Oct 17, 2023 at 09:21:27AM +0000, Dave Hitchman wrote:\n> Oh I dont know. This is getting to be a bit annoying.\n> I had already included the inherit cmake line but now it seems maybe that you dont need to put any cmake commands in... not 100% sure, no one seems to explain this, I am not convinced.\n> However I want some extra flags and I have read that you should be able to:\n> TARGET_CFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n\nDon't put these into CFLAGS. I presume you want to give these to CMake via EXTRA_OECMAKE\nvariable to be used at do_configure time. Check poky tree for documentation and examples,\ndocs are also here:\n\nhttps://docs.yoctoproject.org/dev/singleindex.html#cmake\n\n> but building that gives me\n> + cd /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/build\n> + do_configure\n> + cd /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/git\n> + TARGET_CFLAGS:=-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\n> \n> /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/temp/run.do_configure.991537: 159: TARGET_CFLAGS:=-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON: not found\n> \n> Is there a good, really works, actually sets extra flags, really shows and explains with comments and everything example I can look at?  This bitbake is clearly clever, so is cmake, but in honesty I really gave up trying to understand any of it and just want it to work, writing the code is one thing but these build systems are a fight all of their own that takes longer than the code to solve the universe\n\nBuild systems are hard. I'm sure someone will invent another one to solve all issues\nand resurrect all old ones. :)\n\nCheers,\n\n-Mikko\n\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17  9:52       ` Mikko Rapeli\n@ 2023-10-17 10:09         ` Dave Hitchman\n  2023-10-17 10:22           ` Mikko Rapeli\n  0 siblings, 1 reply; 15+ messages in thread\nFrom: Dave Hitchman @ 2023-10-17 10:09 UTC (permalink / raw)\n  To: Mikko Rapeli; +Cc: yocto\n\n[-- Attachment #1: Type: text/plain, Size: 4360 bytes --]\n\nThanks\n\nSo, first, I thought - as I had seen examples that I had to put these flags etc. in the configuration function but it appears that was a wrong thing.\nNow my recipe looks like:\nSUMMARY = \"mylib\"\nDESCRIPTION = \"Fetch and build mylibi\"\nLICENSE = \"CLOSED\"\nLIC_FILES_CHKSUM = \"\"\n\n##EXTRA_OECMAKE = \"all\"\ninherit cmake\n\npython do_display_banner() {\n    bb.plain(\"***********************************************\");\n    bb.plain(\"*                                             *\");\n    bb.plain(\"*  mylibrecipe created by mei         *\");\n    bb.plain(\"*                                             *\");\n    bb.plain(\"***********************************************\");\n}\n\naddtask display_banner before do_build\n\n# where and how to get source\n## this is via git\nSRC_URI = \"git://git@correct git - this works;\"\n\n# where to source is stored\nS = \"${WORKDIR}/git\"\n\n## was using target flags but Mikko suggested EXTRA_OECMAKE which at least doesnt complain\n##TARGET_CFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n##TARGET_CXXFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\nEXTRA_OECMAKE += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n\n## this I think is needed to ensure the correct compilers are used... I think anyway.\nexport CXX=\"/usr/bin/arm-none-gnueabi-g++\"\nexport CMAKE_CXX_COMPILER=\"/usr/bin/arm-none-gnueabi-g++\"\n\n\n\n\nHowever:\n| DEBUG: Python function extend_recipe_sysroot finished\n| DEBUG: Executing shell function do_configure\n| -- The CXX compiler identification is GNU 9.4.0\n| -- The C compiler identification is GNU 9.4.0\n| -- Detecting CXX compiler ABI info\n| -- Detecting CXX compiler ABI info - failed\n| -- Check for working CXX compiler: /usr/bin/g++\n| -- Check for working CXX compiler: /usr/bin/g++ - broken\n| CMake Error at /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot-native/usr/share/cmake-3.19/Modules/CMakeTestCXXCompiler.cmake:59 (message):\n|   The C++ compiler\n|\n|     \"/usr/bin/g++\"\n|\n|   is not able to compile a simple test program.\n|\n\n\n\n\n\nsuggesting it is not using the c++ I thought it should be.\n________________________________\nFrom: Mikko Rapeli <mikko.rapeli@linaro.org>\nSent: 17 October 2023 11:52\nTo: Dave Hitchman <dave.hitchman@kymati.com>\nCc: yocto@lists.yoctoproject.org <yocto@lists.yoctoproject.org>\nSubject: Re: [yocto] Using cmake... how?\n\nHi,\n\nOn Tue, Oct 17, 2023 at 09:21:27AM +0000, Dave Hitchman wrote:\n> Oh I dont know. This is getting to be a bit annoying.\n> I had already included the inherit cmake line but now it seems maybe that you dont need to put any cmake commands in... not 100% sure, no one seems to explain this, I am not convinced.\n> However I want some extra flags and I have read that you should be able to:\n> TARGET_CFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n\nDon't put these into CFLAGS. I presume you want to give these to CMake via EXTRA_OECMAKE\nvariable to be used at do_configure time. Check poky tree for documentation and examples,\ndocs are also here:\n\nhttps://docs.yoctoproject.org/dev/singleindex.html#cmake\n\n> but building that gives me\n> + cd /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/build\n> + do_configure\n> + cd /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/git\n> + TARGET_CFLAGS:=-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\n>\n> /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/temp/run.do_configure.991537: 159: TARGET_CFLAGS:=-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON: not found\n>\n> Is there a good, really works, actually sets extra flags, really shows and explains with comments and everything example I can look at?  This bitbake is clearly clever, so is cmake, but in honesty I really gave up trying to understand any of it and just want it to work, writing the code is one thing but these build systems are a fight all of their own that takes longer than the code to solve the universe\n\nBuild systems are hard. I'm sure someone will invent another one to solve all issues\nand resurrect all old ones. :)\n\nCheers,\n\n-Mikko\n\n[-- Attachment #2: Type: text/html, Size: 10352 bytes --]\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 10:09         ` Dave Hitchman\n@ 2023-10-17 10:22           ` Mikko Rapeli\n  2023-10-17 11:35             ` Dave Hitchman\n  0 siblings, 1 reply; 15+ messages in thread\nFrom: Mikko Rapeli @ 2023-10-17 10:22 UTC (permalink / raw)\n  To: Dave Hitchman; +Cc: yocto\n\nHi,\n\nOn Tue, Oct 17, 2023 at 10:09:42AM +0000, Dave Hitchman wrote:\n> Thanks\n> \n> So, first, I thought - as I had seen examples that I had to put these flags etc. in the configuration function but it appears that was a wrong thing.\n> Now my recipe looks like:\n> SUMMARY = \"mylib\"\n> DESCRIPTION = \"Fetch and build mylibi\"\n> LICENSE = \"CLOSED\"\n> LIC_FILES_CHKSUM = \"\"\n> \n> ##EXTRA_OECMAKE = \"all\"\n> inherit cmake\n> \n> python do_display_banner() {\n>     bb.plain(\"***********************************************\");\n>     bb.plain(\"*                                             *\");\n>     bb.plain(\"*  mylibrecipe created by mei         *\");\n>     bb.plain(\"*                                             *\");\n>     bb.plain(\"***********************************************\");\n> }\n> \n> addtask display_banner before do_build\n> \n> # where and how to get source\n> ## this is via git\n> SRC_URI = \"git://git@correct git - this works;\"\n> \n> # where to source is stored\n> S = \"${WORKDIR}/git\"\n> \n> ## was using target flags but Mikko suggested EXTRA_OECMAKE which at least doesnt complain\n> ##TARGET_CFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n> ##TARGET_CXXFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n> EXTRA_OECMAKE += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n> \n> ## this I think is needed to ensure the correct compilers are used... I think anyway.\n> export CXX=\"/usr/bin/arm-none-gnueabi-g++\"\n> export CMAKE_CXX_COMPILER=\"/usr/bin/arm-none-gnueabi-g++\"\n\nThis is wrong. cmake.bbclass generates a toolchain file which is given\nto cmake binary and this has all the compiler, binary, module, header file etc\nsearch paths set correctly. It's up to the CMake scripts of the SW component to obey\nthese settings and not overwrite them. The SW component can amend them by appending\nto them but not overwriting. An overwrite of any variable from toolchain.cmake\nwill break things in various ways. Run the \"bitbake -c configure && bitbake -c compile\" steps\nmanually and check the environment in a \"bitbake -c devshell\", for example.\n\n> However:\n> | DEBUG: Python function extend_recipe_sysroot finished\n> | DEBUG: Executing shell function do_configure\n> | -- The CXX compiler identification is GNU 9.4.0\n> | -- The C compiler identification is GNU 9.4.0\n> | -- Detecting CXX compiler ABI info\n> | -- Detecting CXX compiler ABI info - failed\n> | -- Check for working CXX compiler: /usr/bin/g++\n> | -- Check for working CXX compiler: /usr/bin/g++ - broken\n> | CMake Error at /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot-native/usr/share/cmake-3.19/Modules/CMakeTestCXXCompiler.cmake:59 (message):\n> |   The C++ compiler\n> |\n> |     \"/usr/bin/g++\"\n> |\n> |   is not able to compile a simple test program.\n> |\n> \n> suggesting it is not using the c++ I thought it should be.\n\nYes, as said before, using the host compiled from the Linux machine instead of\nyocto cross compiler for real target.\n\nCheers,\n\n-Mikko\n\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 10:22           ` Mikko Rapeli\n@ 2023-10-17 11:35             ` Dave Hitchman\n  2023-10-17 11:42               ` Mikko Rapeli\n  2023-10-17 11:53               ` Mikko Rapeli\n  0 siblings, 2 replies; 15+ messages in thread\nFrom: Dave Hitchman @ 2023-10-17 11:35 UTC (permalink / raw)\n  To: Mikko Rapeli; +Cc: yocto\n\n[-- Attachment #1: Type: text/plain, Size: 19510 bytes --]\n\nThanks, but without the CXX settings there is no difference either, it still uses the wrong toolchain (or rather tries to and fails in the same way) . I have now removed the two export CXX type lines...\n\n\nbitbake -c configure custom-image-mpet\nLoading cache: 100% |#######################################################################################################################################| Time: 0:00:00\nLoaded 5337 entries from dependency cache.\nParsing recipes: 100% |#####################################################################################################################################| Time: 0:00:00\nParsing of 3640 .bb files complete (3639 cached, 1 parsed). 5336 targets, 576 skipped, 1 masked, 0 errors.\nNOTE: Resolving any missing task queue dependencies\n\nBuild Configuration:\nBB_VERSION           = \"1.50.0\"\nBUILD_SYS            = \"x86_64-linux\"\nNATIVELSBSTRING      = \"universal\"\nTARGET_SYS           = \"aarch64-phytec-linux\"\nMACHINE              = \"phyboard-pollux-imx8mp-2\"\nDISTRO               = \"ampliphy-vendor\"\nDISTRO_VERSION       = \"BSP-Yocto-NXP-i.MX8MP-PD22.1.1\"\nTUNE_FEATURES        = \"aarch64 armv8a crc cortexa53 crypto\"\nTARGET_FPU           = \"\"\nmeta\nmeta-poky            = \"HEAD:269265c00091fa65f93de6cad32bf24f1e7f72a3\"\nmeta-oe\nmeta-networking\nmeta-python\nmeta-multimedia\nmeta-filesystems\nmeta-perl\nmeta-gnome           = \"HEAD:f44e1a2b575826e88b8cb2725e54a7c5d29cf94a\"\nmeta-bsp\nmeta-sdk\nmeta-ml              = \"HEAD:cc4c2d1c845b48fdec989f089aee3c13d2b1e15b\"\nmeta-chromium        = \"HEAD:8be1d3a0ba0cf32e61144900597207af5698c10d\"\nmeta-clang           = \"HEAD:b0d805060791006d651efd3d7ae3dd5add8f70fe\"\nmeta-freescale       = \"HEAD:f0be684f01b53482cb43e016a5c5c1faf3ae448e\"\nmeta-freescale-3rdparty = \"HEAD:f8150f3b37cb83cba1f9e2378e57bb63e02d4610\"\nmeta-freescale-distro = \"HEAD:e6daa26ba1f748326546063d63a085ae671827d9\"\nmeta-nxp-demo-experience = \"HEAD:9dcc11ea9f525cffedbb28895e0abb443e56c3e0\"\nmeta-python2         = \"HEAD:8db9e4f6ceae33d7a4f55453d31e69f9858af4eb\"\nmeta-qt5             = \"HEAD:43f8f539d40070a70fe89136db89bf5bb1dfe7ed\"\nmeta-virtualization  = \"HEAD:7f719ef40896b6c78893add8485fda995b00d51d\"\nmeta-rauc            = \"HEAD:b344adecae6cef9a26b3c5b6a7bb344d18c074a6\"\nmeta-phytec          = \"HEAD:f023740382f01e85151a67843a08d9d965503961\"\nmeta-ampliphy        = \"HEAD:d761395629c0f8f0d06f9fd6fe128fdb001fdfec\"\nmeta-security\nmeta-tpm             = \"HEAD:c40e1e84da9624b9096a463dbed3b301c01c268e\"\nmeta-custom-mpet     = \"master:19ff82126c1239c9fe258555b10ee2e44d7f651a\"\n\nInitialising tasks: 100% |##################################################################################################################################| Time: 0:00:03\nSstate summary: Wanted 8 Local 4 Network 0 Missed 4 Current 193 (50% match, 98% complete)\nRemoving 1 stale sstate objects for arch phyboard_pollux_imx8mp_2: 100% |###################################################################################| Time: 0:00:00\nNOTE: Executing Tasks\nWARNING: optee-os-3.15.0.imx-r0 do_optee_warning: OP-TEE support is experimental and not ready for production use\nNOTE: Tasks Summary: Attempted 891 tasks of which 885 didn't need to be rerun and all succeeded.\nNOTE: Writing buildhistory\nNOTE: Writing buildhistory took: 3 seconds\n\nSummary: There was 1 WARNING message shown.\ndave@dave-TUXEDO-Aura-15-Gen1:~/Documents/Kymati/yocto/build$\n\n\n\n\nbitbake -c compile custom-image-mpet\nLoading cache: 100% |#######################################################################################################################################| Time: 0:00:00\nLoaded 5337 entries from dependency cache.\nNOTE: Resolving any missing task queue dependencies\n\nBuild Configuration:\nBB_VERSION           = \"1.50.0\"\nBUILD_SYS            = \"x86_64-linux\"\nNATIVELSBSTRING      = \"universal\"\nTARGET_SYS           = \"aarch64-phytec-linux\"\nMACHINE              = \"phyboard-pollux-imx8mp-2\"\nDISTRO               = \"ampliphy-vendor\"\nDISTRO_VERSION       = \"BSP-Yocto-NXP-i.MX8MP-PD22.1.1\"\nTUNE_FEATURES        = \"aarch64 armv8a crc cortexa53 crypto\"\nTARGET_FPU           = \"\"\nmeta\nmeta-poky            = \"HEAD:269265c00091fa65f93de6cad32bf24f1e7f72a3\"\nmeta-oe\nmeta-networking\nmeta-python\nmeta-multimedia\nmeta-filesystems\nmeta-perl\nmeta-gnome           = \"HEAD:f44e1a2b575826e88b8cb2725e54a7c5d29cf94a\"\nmeta-bsp\nmeta-sdk\nmeta-ml              = \"HEAD:cc4c2d1c845b48fdec989f089aee3c13d2b1e15b\"\nmeta-chromium        = \"HEAD:8be1d3a0ba0cf32e61144900597207af5698c10d\"\nmeta-clang           = \"HEAD:b0d805060791006d651efd3d7ae3dd5add8f70fe\"\nmeta-freescale       = \"HEAD:f0be684f01b53482cb43e016a5c5c1faf3ae448e\"\nmeta-freescale-3rdparty = \"HEAD:f8150f3b37cb83cba1f9e2378e57bb63e02d4610\"\nmeta-freescale-distro = \"HEAD:e6daa26ba1f748326546063d63a085ae671827d9\"\nmeta-nxp-demo-experience = \"HEAD:9dcc11ea9f525cffedbb28895e0abb443e56c3e0\"\nmeta-python2         = \"HEAD:8db9e4f6ceae33d7a4f55453d31e69f9858af4eb\"\nmeta-qt5             = \"HEAD:43f8f539d40070a70fe89136db89bf5bb1dfe7ed\"\nmeta-virtualization  = \"HEAD:7f719ef40896b6c78893add8485fda995b00d51d\"\nmeta-rauc            = \"HEAD:b344adecae6cef9a26b3c5b6a7bb344d18c074a6\"\nmeta-phytec          = \"HEAD:f023740382f01e85151a67843a08d9d965503961\"\nmeta-ampliphy        = \"HEAD:d761395629c0f8f0d06f9fd6fe128fdb001fdfec\"\nmeta-security\nmeta-tpm             = \"HEAD:c40e1e84da9624b9096a463dbed3b301c01c268e\"\nmeta-custom-mpet     = \"master:19ff82126c1239c9fe258555b10ee2e44d7f651a\"\n\nInitialising tasks: 100% |##################################################################################################################################| Time: 0:00:02\nSstate summary: Wanted 7 Local 4 Network 0 Missed 3 Current 194 (57% match, 98% complete)\nRemoving 3 stale sstate objects for arch phyboard_pollux_imx8mp_2: 100% |###################################################################################| Time: 0:00:00\nNOTE: Executing Tasks\nWARNING: optee-os-3.15.0.imx-r0 do_optee_warning: OP-TEE support is experimental and not ready for production use\nNOTE: Tasks Summary: Attempted 892 tasks of which 889 didn't need to be rerun and all succeeded.\nNOTE: Writing buildhistory\nNOTE: Writing buildhistory took: 2 seconds\n\nSummary: There was 1 WARNING message shown.\n\n\n\n\nBut when I build ...\n\n\n\nbitbake custom-image-mpet\nLoading cache: 100% |#######################################################################################################################################| Time: 0:00:00\nLoaded 5337 entries from dependency cache.\nNOTE: Resolving any missing task queue dependencies\n\nBuild Configuration:\nBB_VERSION           = \"1.50.0\"\nBUILD_SYS            = \"x86_64-linux\"\nNATIVELSBSTRING      = \"universal\"\nTARGET_SYS           = \"aarch64-phytec-linux\"\nMACHINE              = \"phyboard-pollux-imx8mp-2\"\nDISTRO               = \"ampliphy-vendor\"\nDISTRO_VERSION       = \"BSP-Yocto-NXP-i.MX8MP-PD22.1.1\"\nTUNE_FEATURES        = \"aarch64 armv8a crc cortexa53 crypto\"\nTARGET_FPU           = \"\"\nmeta\nmeta-poky            = \"HEAD:269265c00091fa65f93de6cad32bf24f1e7f72a3\"\nmeta-oe\nmeta-networking\nmeta-python\nmeta-multimedia\nmeta-filesystems\nmeta-perl\nmeta-gnome           = \"HEAD:f44e1a2b575826e88b8cb2725e54a7c5d29cf94a\"\nmeta-bsp\nmeta-sdk\nmeta-ml              = \"HEAD:cc4c2d1c845b48fdec989f089aee3c13d2b1e15b\"\nmeta-chromium        = \"HEAD:8be1d3a0ba0cf32e61144900597207af5698c10d\"\nmeta-clang           = \"HEAD:b0d805060791006d651efd3d7ae3dd5add8f70fe\"\nmeta-freescale       = \"HEAD:f0be684f01b53482cb43e016a5c5c1faf3ae448e\"\nmeta-freescale-3rdparty = \"HEAD:f8150f3b37cb83cba1f9e2378e57bb63e02d4610\"\nmeta-freescale-distro = \"HEAD:e6daa26ba1f748326546063d63a085ae671827d9\"\nmeta-nxp-demo-experience = \"HEAD:9dcc11ea9f525cffedbb28895e0abb443e56c3e0\"\nmeta-python2         = \"HEAD:8db9e4f6ceae33d7a4f55453d31e69f9858af4eb\"\nmeta-qt5             = \"HEAD:43f8f539d40070a70fe89136db89bf5bb1dfe7ed\"\nmeta-virtualization  = \"HEAD:7f719ef40896b6c78893add8485fda995b00d51d\"\nmeta-rauc            = \"HEAD:b344adecae6cef9a26b3c5b6a7bb344d18c074a6\"\nmeta-phytec          = \"HEAD:f023740382f01e85151a67843a08d9d965503961\"\nmeta-ampliphy        = \"HEAD:d761395629c0f8f0d06f9fd6fe128fdb001fdfec\"\nmeta-security\nmeta-tpm             = \"HEAD:c40e1e84da9624b9096a463dbed3b301c01c268e\"\nmeta-custom-mpet     = \"master:19ff82126c1239c9fe258555b10ee2e44d7f651a\"\n\nInitialising tasks: 100% |##################################################################################################################################| Time: 0:00:04\nSstate summary: Wanted 139 Local 114 Network 0 Missed 25 Current 1038 (82% match, 97% complete)\nRemoving 9 stale sstate objects for arch phyboard_pollux_imx8mp_2: 100% |###################################################################################| Time: 0:00:00\nRemoving 3 stale sstate objects for arch cortexa53-crypto: 100% |###########################################################################################| Time: 0:00:00\nNOTE: Executing Tasks\nWARNING: optee-os-3.15.0.imx-r0 do_optee_warning: OP-TEE support is experimental and not ready for production use\nERROR: libkymati-1.0-r0 do_configure: Execution of '/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/temp/run.do_configure.1005716' failed with exit code 1\nERROR: Logfile of failure stored in: /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/temp/log.do_configure.1005716\nLog data follows:\n| DEBUG: Executing python function extend_recipe_sysroot\n| NOTE: Direct dependencies are ['/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-devtools/gcc/gcc-cross_10.2.bb:do_populate_sysroot', 'virtual:native:/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-devtools/pseudo/pseudo_git.bb:do_populate_sysroot', '/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-devtools/quilt/quilt-native_0.66.bb:do_populate_sysroot', 'virtual:native:/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-devtools/ninja/ninja_1.10.2.bb:do_populate_sysroot', '/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-core/glibc/glibc_2.33.bb:do_populate_sysroot', '/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-devtools/gcc/gcc-runtime_10.2.bb:do_populate_sysroot', '/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-devtools/cmake/cmake-native_3.19.5.bb:do_populate_sysroot', 'virtual:native:/home/dave/Documents/Kymati/yocto/sources/poky/../poky/meta/recipes-devtools/patch/patch_2.7.6.bb:do_populate_sysroot']\n| NOTE: Installed into sysroot: []\n| NOTE: Skipping as already exists in sysroot: ['gcc-cross-aarch64', 'pseudo-native', 'quilt-native', 'ninja-native', 'glibc', 'gcc-runtime', 'cmake-native', 'patch-native', 'binutils-cross-aarch64', 'flex-native', 'libmpc-native', 'libtool-native', 'texinfo-dummy-native', 'xz-native', 'gnu-config-native', 'zlib-native', 'mpfr-native', 'autoconf-native', 'automake-native', 'gmp-native', 'linux-libc-headers', 're2c-native', 'libgcc', 'bzip2-native', 'ncurses-native', 'curl-native', 'attr-native', 'm4-native', 'gettext-minimal-native', 'pkgconfig-native', 'openssl-native']\n| DEBUG: Python function extend_recipe_sysroot finished\n| DEBUG: Executing shell function do_configure\n| -- The CXX compiler identification is GNU 9.4.0\n| -- The C compiler identification is GNU 9.4.0\n| -- Detecting CXX compiler ABI info\n| -- Detecting CXX compiler ABI info - failed\n| -- Check for working CXX compiler: /usr/bin/g++\n| -- Check for working CXX compiler: /usr/bin/g++ - broken\n| CMake Error at /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot-native/usr/share/cmake-3.19/Modules/CMakeTestCXXCompiler.cmake:59 (message):\n|   The C++ compiler\n|\n|     \"/usr/bin/g++\"\n|\n|   is not able to compile a simple test program.\n|\n|   It fails with the following output:\n|\n|     Change Dir: /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/git/CMakeFiles/CMakeTmp\n|\n|     Run Build Command(s):ninja cmTC_e06e9 && [1/2] Building CXX object CMakeFiles/cmTC_e06e9.dir/testCXXCompiler.cxx.o\n|     FAILED: CMakeFiles/cmTC_e06e9.dir/testCXXCompiler.cxx.o\n|     /usr/bin/g++   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0=/usr/src/debug/libkymati/1.0-r0                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0=/usr/src/debug/libkymati/1.0-r0                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot=                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot-native=  -fvisibility-inlines-hidden  -mcpu=cortex-a53 -march=armv8-a+crc+crypto -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security  --sysroot=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot -o CMakeFiles/cmTC_e06e9.dir/testCXXCompiler.cxx.o -c testCXXCompiler.cxx\n|     g++: warning: ‘-mcpu=’ is deprecated; use ‘-mtune=’ or ‘-march=’ instead\n|     cc1plus: error: bad value (‘armv8-a+crc+crypto’) for ‘-march=’ switch\n|     cc1plus: note: valid arguments to ‘-march=’ switch are: nocona core2 nehalem corei7 westmere sandybridge corei7-avx ivybridge core-avx-i haswell core-avx2 broadwell skylake skylake-avx512 cannonlake icelake-client icelake-server cascadelake tigerlake bonnell atom silvermont slm goldmont goldmont-plus tremont knl knm x86-64 eden-x2 nano nano-1000 nano-2000 nano-3000 nano-x2 eden-x4 nano-x4 k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3 athlon-fx amdfam10 barcelona bdver1 bdver2 bdver3 bdver4 znver1 znver2 btver1 btver2 native\n|     cc1plus: error: bad value (‘cortex-a53’) for ‘-mtune=’ switch\n|     cc1plus: note: valid arguments to ‘-mtune=’ switch are: nocona core2 nehalem corei7 westmere sandybridge corei7-avx ivybridge core-avx-i haswell core-avx2 broadwell skylake skylake-avx512 cannonlake icelake-client icelake-server cascadelake tigerlake bonnell atom silvermont slm goldmont goldmont-plus tremont knl knm intel x86-64 eden-x2 nano nano-1000 nano-2000 nano-3000 nano-x2 eden-x4 nano-x4 k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3 athlon-fx amdfam10 barcelona bdver1 bdver2 bdver3 bdver4 znver1 znver2 btver1 btver2 generic native\n|     ninja: build stopped: subcommand failed.\n|\n|\n|\n|\n|\n|   CMake will not be able to correctly generate this project.\n| Call Stack (most recent call first):\n|   CMakeLists.txt:3 (project)\n|\n|\n| -- Configuring incomplete, errors occurred!\n| See also \"/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/git/CMakeFiles/CMakeOutput.log\".\n| See also \"/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/git/CMakeFiles/CMakeError.log\".\n| WARNING: exit code 1 from a shell command.\n| ERROR: Execution of '/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/temp/run.do_configure.1005716' failed with exit code 1\nERROR: Task (/home/dave/Documents/Kymati/yocto/sources/poky/../meta-custom-mpet/recipes-apps/libkymati/libkymati.bb:do_configure) failed with exit code '1'\nNOTE: Tasks Summary: Attempted 2684 tasks of which 2680 didn't need to be rerun and 1 failed.\nNOTE: Writing buildhistory\nNOTE: Writing buildhistory took: 3 seconds\n\nSummary: 1 task failed:\n  /home/dave/Documents/Kymati/yocto/sources/poky/../meta-custom-mpet/recipes-apps/libkymati/libkymati.bb:do_configure\nSummary: There was 1 WARNING message shown.\nSummary: There was 1 ERROR message shown, returning a non-zero exit code.\n\n\n\n\n\n\n\n________________________________\nFrom: Mikko Rapeli <mikko.rapeli@linaro.org>\nSent: 17 October 2023 12:22\nTo: Dave Hitchman <dave.hitchman@kymati.com>\nCc: yocto@lists.yoctoproject.org <yocto@lists.yoctoproject.org>\nSubject: Re: [yocto] Using cmake... how?\n\nHi,\n\nOn Tue, Oct 17, 2023 at 10:09:42AM +0000, Dave Hitchman wrote:\n> Thanks\n>\n> So, first, I thought - as I had seen examples that I had to put these flags etc. in the configuration function but it appears that was a wrong thing.\n> Now my recipe looks like:\n> SUMMARY = \"mylib\"\n> DESCRIPTION = \"Fetch and build mylibi\"\n> LICENSE = \"CLOSED\"\n> LIC_FILES_CHKSUM = \"\"\n>\n> ##EXTRA_OECMAKE = \"all\"\n> inherit cmake\n>\n> python do_display_banner() {\n>     bb.plain(\"***********************************************\");\n>     bb.plain(\"*                                             *\");\n>     bb.plain(\"*  mylibrecipe created by mei         *\");\n>     bb.plain(\"*                                             *\");\n>     bb.plain(\"***********************************************\");\n> }\n>\n> addtask display_banner before do_build\n>\n> # where and how to get source\n> ## this is via git\n> SRC_URI = \"git://git@correct git - this works;\"\n>\n> # where to source is stored\n> S = \"${WORKDIR}/git\"\n>\n> ## was using target flags but Mikko suggested EXTRA_OECMAKE which at least doesnt complain\n> ##TARGET_CFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n> ##TARGET_CXXFLAGS += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n> EXTRA_OECMAKE += \"-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED=ON -DBUILD_TOOLS=ON\"\n>\n> ## this I think is needed to ensure the correct compilers are used... I think anyway.\n> export CXX=\"/usr/bin/arm-none-gnueabi-g++\"\n> export CMAKE_CXX_COMPILER=\"/usr/bin/arm-none-gnueabi-g++\"\n\nThis is wrong. cmake.bbclass generates a toolchain file which is given\nto cmake binary and this has all the compiler, binary, module, header file etc\nsearch paths set correctly. It's up to the CMake scripts of the SW component to obey\nthese settings and not overwrite them. The SW component can amend them by appending\nto them but not overwriting. An overwrite of any variable from toolchain.cmake\nwill break things in various ways. Run the \"bitbake -c configure && bitbake -c compile\" steps\nmanually and check the environment in a \"bitbake -c devshell\", for example.\n\n> However:\n> | DEBUG: Python function extend_recipe_sysroot finished\n> | DEBUG: Executing shell function do_configure\n> | -- The CXX compiler identification is GNU 9.4.0\n> | -- The C compiler identification is GNU 9.4.0\n> | -- Detecting CXX compiler ABI info\n> | -- Detecting CXX compiler ABI info - failed\n> | -- Check for working CXX compiler: /usr/bin/g++\n> | -- Check for working CXX compiler: /usr/bin/g++ - broken\n> | CMake Error at /home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot-native/usr/share/cmake-3.19/Modules/CMakeTestCXXCompiler.cmake:59 (message):\n> |   The C++ compiler\n> |\n> |     \"/usr/bin/g++\"\n> |\n> |   is not able to compile a simple test program.\n> |\n>\n> suggesting it is not using the c++ I thought it should be.\n\nYes, as said before, using the host compiled from the Linux machine instead of\nyocto cross compiler for real target.\n\nCheers,\n\n-Mikko\n\n[-- Attachment #2: Type: text/html, Size: 36800 bytes --]\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 11:35             ` Dave Hitchman\n@ 2023-10-17 11:42               ` Mikko Rapeli\n  2023-10-17 11:53               ` Mikko Rapeli\n  1 sibling, 0 replies; 15+ messages in thread\nFrom: Mikko Rapeli @ 2023-10-17 11:42 UTC (permalink / raw)\n  To: Dave Hitchman; +Cc: yocto\n\nHi,\n\nOn Tue, Oct 17, 2023 at 11:35:13AM +0000, Dave Hitchman wrote:\n> Thanks, but without the CXX settings there is no difference either, it still uses the wrong toolchain (or rather tries to and fails in the same way) . I have now removed the two export CXX type lines...\n\nCheck the CMakeFile.txt etc scripts in the SW component. They are likely overwriting\nvariables like CXX. Alternatively, they are trying to mix host (-native) and target\ncompilation in one step by compiling code generators etc tools.\n\nIf something on bitbake side is setting CXX etc variables, those can be seen\nwith \"bitbake -e recipe\".\n\nSadly these issues are quite common for SW which has not been cross compiled before..\n\nCheers,\n\n-Mikko\n\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 11:35             ` Dave Hitchman\n  2023-10-17 11:42               ` Mikko Rapeli\n@ 2023-10-17 11:53               ` Mikko Rapeli\n  2023-10-17 11:58                 ` Dave Hitchman\n  1 sibling, 1 reply; 15+ messages in thread\nFrom: Mikko Rapeli @ 2023-10-17 11:53 UTC (permalink / raw)\n  To: Dave Hitchman; +Cc: yocto\n\nHi,\n\nOn Tue, Oct 17, 2023 at 11:35:13AM +0000, Dave Hitchman wrote:\n<snip>\n> |     /usr/bin/g++   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0=/usr/src/debug/libkymati/1.0-r0                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0=/usr/src/debug/libkymati/1.0-r0                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot=                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot-native=  -fvisibility-inlines-hidden  -mcpu=cortex-a53 -march=armv8-a+crc+crypto -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security  --sysroot=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot -o CMakeFiles/cmTC_e06e9.dir/testCXXCompiler.cxx.o -c testCXXCompiler.cxx\n> |     g++: warning: ‘-mcpu=’ is deprecated; use ‘-mtune=’ or ‘-march=’ instead\n> |     cc1plus: error: bad value (‘armv8-a+crc+crypto’) for ‘-march=’ switch\n> |     cc1plus: note: valid arguments to ‘-march=’ switch are: nocona core2 nehalem corei7 westmere sandybridge corei7-avx ivybridge core-avx-i haswell core-avx2 broadwell skylake skylake-avx512 cannonlake icelake-client icelake-server cascadelake tigerlake bonnell atom silvermont slm goldmont goldmont-plus tremont knl knm x86-64 eden-x2 nano nano-1000 nano-2000 nano-3000 nano-x2 eden-x4 nano-x4 k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3 athlon-fx amdfam10 barcelona bdver1 bdver2 bdver3 bdver4 znver1 znver2 btver1 btver2 native\n\nFor example here the \"/usr/bin/g++\" compiler will not understand -mcpu=cortex-a53 flags\nsince the compiler is on the Linux build machine and compiling natively for x86_64 target\narchitecture, this is not the yocto/bitbake cross compiler. The correct compiler binary\nis set via CMAKE_CXX_COMPILER variable in the toolchain file and path to it is somewhere\nin the recipe specific native sysroot path. CMake build scripts of libkymati must use those\nvariables from the toolchain file. They must not overwrite them with their own guesses\nlike /usr/bin/g++.\n\nFurther details depends on what kind of CMake build scripts libkymati has.\n\nCheers,\n\n-Mikko\n\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 11:53               ` Mikko Rapeli\n@ 2023-10-17 11:58                 ` Dave Hitchman\n  2023-10-17 12:23                   ` Mikko Rapeli\n  2023-10-17 13:32                   ` Ross Burton\n  0 siblings, 2 replies; 15+ messages in thread\nFrom: Dave Hitchman @ 2023-10-17 11:58 UTC (permalink / raw)\n  To: Mikko Rapeli; +Cc: yocto\n\n[-- Attachment #1: Type: text/plain, Size: 3067 bytes --]\n\nI understand that, and the compiler the rest of the recipe uses does cope so I am trying to understand why this bit of the whole thing is using a different compiler. Maybe it is somewhere in the cmake of the library, but it certainly isnt obvious. Thats where I am digging for the moment.\n________________________________\nFrom: Mikko Rapeli <mikko.rapeli@linaro.org>\nSent: 17 October 2023 13:53\nTo: Dave Hitchman <dave.hitchman@kymati.com>\nCc: yocto@lists.yoctoproject.org <yocto@lists.yoctoproject.org>\nSubject: Re: [yocto] Using cmake... how?\n\nHi,\n\nOn Tue, Oct 17, 2023 at 11:35:13AM +0000, Dave Hitchman wrote:\n<snip>\n> |     /usr/bin/g++   -O2 -pipe -g -feliminate-unused-debug-types -fmacro-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0=/usr/src/debug/libkymati/1.0-r0                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0=/usr/src/debug/libkymati/1.0-r0                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot=                      -fdebug-prefix-map=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot-native=  -fvisibility-inlines-hidden  -mcpu=cortex-a53 -march=armv8-a+crc+crypto -fstack-protector-strong  -O2 -D_FORTIFY_SOURCE=2 -Wformat -Wformat-security -Werror=format-security  --sysroot=/home/dave/Documents/Kymati/yocto/build/tmp/work/cortexa53-crypto-phytec-linux/libkymati/1.0-r0/recipe-sysroot -o CMakeFiles/cmTC_e06e9.dir/testCXXCompiler.cxx.o -c testCXXCompiler.cxx\n> |     g++: warning: ‘-mcpu=’ is deprecated; use ‘-mtune=’ or ‘-march=’ instead\n> |     cc1plus: error: bad value (‘armv8-a+crc+crypto’) for ‘-march=’ switch\n> |     cc1plus: note: valid arguments to ‘-march=’ switch are: nocona core2 nehalem corei7 westmere sandybridge corei7-avx ivybridge core-avx-i haswell core-avx2 broadwell skylake skylake-avx512 cannonlake icelake-client icelake-server cascadelake tigerlake bonnell atom silvermont slm goldmont goldmont-plus tremont knl knm x86-64 eden-x2 nano nano-1000 nano-2000 nano-3000 nano-x2 eden-x4 nano-x4 k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3 athlon-fx amdfam10 barcelona bdver1 bdver2 bdver3 bdver4 znver1 znver2 btver1 btver2 native\n\nFor example here the \"/usr/bin/g++\" compiler will not understand -mcpu=cortex-a53 flags\nsince the compiler is on the Linux build machine and compiling natively for x86_64 target\narchitecture, this is not the yocto/bitbake cross compiler. The correct compiler binary\nis set via CMAKE_CXX_COMPILER variable in the toolchain file and path to it is somewhere\nin the recipe specific native sysroot path. CMake build scripts of libkymati must use those\nvariables from the toolchain file. They must not overwrite them with their own guesses\nlike /usr/bin/g++.\n\nFurther details depends on what kind of CMake build scripts libkymati has.\n\nCheers,\n\n-Mikko\n\n[-- Attachment #2: Type: text/html, Size: 4411 bytes --]\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 11:58                 ` Dave Hitchman\n@ 2023-10-17 12:23                   ` Mikko Rapeli\n  2023-10-17 13:32                   ` Ross Burton\n  1 sibling, 0 replies; 15+ messages in thread\nFrom: Mikko Rapeli @ 2023-10-17 12:23 UTC (permalink / raw)\n  To: Dave Hitchman; +Cc: yocto\n\nHi,\n\nOn Tue, Oct 17, 2023 at 11:58:23AM +0000, Dave Hitchman wrote:\n> I understand that, and the compiler the rest of the recipe uses does cope so I am trying to understand why this bit of the whole thing is using a different compiler. Maybe it is somewhere in the cmake of the library, but it certainly isnt obvious. Thats where I am digging for the moment.\n\nOne thing could be CMake calls to sub projects/directories/modules where the\ntoolchain file is not propagated. So first level CMake gets correctly called with\ncross compile toolchain file but second or third level ones not. These are\nannoyingly tricky to spot. It makes sense to change the do_configure\ntask calls to cmake be as verbose as possible. CMake doesn't make these easy.\n\nHope this helps,\n\n-Mikko\n\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 11:58                 ` Dave Hitchman\n  2023-10-17 12:23                   ` Mikko Rapeli\n@ 2023-10-17 13:32                   ` Ross Burton\n  2023-10-17 15:18                     ` Dave Hitchman\n  1 sibling, 1 reply; 15+ messages in thread\nFrom: Ross Burton @ 2023-10-17 13:32 UTC (permalink / raw)\n  To: dave.hitchman; +Cc: Mikko Rapeli, yocto\n\nOn 17 Oct 2023, at 12:58, Dave Hitchman via lists.yoctoproject.org <dave.hitchman=kymati.com@lists.yoctoproject.org> wrote:\n> \n> \n> I understand that, and the compiler the rest of the recipe uses does cope so I am trying to understand why this bit of the whole thing is using a different compiler. Maybe it is somewhere in the cmake of the library, but it certainly isnt obvious. Thats where I am digging for the moment.\n\nI presume this is a closed-source library so you can’t just share it?\n\nThe CMakeLists.txt are definitely doing The Wrong Thing by not respecting the environment the toolchain sets up.  Unfortunately this is now your problem to figure out exactly where and why it overrides the settings.\n\nRoss\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "* Re: [yocto] Using cmake... how?\n  2023-10-17 13:32                   ` Ross Burton\n@ 2023-10-17 15:18                     ` Dave Hitchman\n  0 siblings, 0 replies; 15+ messages in thread\nFrom: Dave Hitchman @ 2023-10-17 15:18 UTC (permalink / raw)\n  To: Ross Burton; +Cc: Mikko Rapeli, yocto\n\n[-- Attachment #1: Type: text/plain, Size: 1085 bytes --]\n\nYeah, it is indeed, hence the changing the git address 🙂\n________________________________\nFrom: Ross Burton <Ross.Burton@arm.com>\nSent: 17 October 2023 15:32\nTo: Dave Hitchman <dave.hitchman@kymati.com>\nCc: Mikko Rapeli <mikko.rapeli@linaro.org>; yocto@lists.yoctoproject.org <yocto@lists.yoctoproject.org>\nSubject: Re: [yocto] Using cmake... how?\n\nOn 17 Oct 2023, at 12:58, Dave Hitchman via lists.yoctoproject.org <dave.hitchman=kymati.com@lists.yoctoproject.org> wrote:\n>\n>\n> I understand that, and the compiler the rest of the recipe uses does cope so I am trying to understand why this bit of the whole thing is using a different compiler. Maybe it is somewhere in the cmake of the library, but it certainly isnt obvious. Thats where I am digging for the moment.\n\nI presume this is a closed-source library so you can’t just share it?\n\nThe CMakeLists.txt are definitely doing The Wrong Thing by not respecting the environment the toolchain sets up.  Unfortunately this is now your problem to figure out exactly where and why it overrides the settings.\n\nRoss\n\n[-- Attachment #2: Type: text/html, Size: 1956 bytes --]\n\n^ permalink raw reply\t[flat|nested] 15+ messages in thread",
    "end of thread, other threads:[~2023-10-17 15:18 UTC | newest]\n\nThread overview: 15+ messages (download: mbox.gz / follow: Atom feed)\n-- links below jump to the message on this page --\n2023-10-16 11:22 [meta-rockchip][kirkstone][PATCH] bsp: rkbin: fix default COMPATIBLE_MACHINE matching all Quentin Schulz\n2023-10-16 15:27 ` [yocto] Using cmake... how? Dave Hitchman\n2023-10-16 19:48   ` Khem Raj\n2023-10-17  5:49   ` Mikko Rapeli\n2023-10-17  9:21     ` Dave Hitchman\n2023-10-17  9:52       ` Mikko Rapeli\n2023-10-17 10:09         ` Dave Hitchman\n2023-10-17 10:22           ` Mikko Rapeli\n2023-10-17 11:35             ` Dave Hitchman\n2023-10-17 11:42               ` Mikko Rapeli\n2023-10-17 11:53               ` Mikko Rapeli\n2023-10-17 11:58                 ` Dave Hitchman\n2023-10-17 12:23                   ` Mikko Rapeli\n2023-10-17 13:32                   ` Ross Burton\n2023-10-17 15:18                     ` Dave Hitchman\n"
]