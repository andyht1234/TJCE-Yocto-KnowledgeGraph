* Auto-mount causing "transport endpoint is not connected error"
@ 2023-10-09 15:36 Logan Grosz
  0 siblings, 0 replies; only message in thread
From: Logan Grosz @ 2023-10-09 15:36 UTC (permalink / raw)
  To: yocto

[-- Attachment #1: Type: text/plain, Size: 5245 bytes --]

Hi, all

I am attempting to set up removable drive auto-mounting. I am doing so with a tweaked version of meta/recipes-core/udev/udev-extraconf/mount.sh​.

My version is as follows

```
#!/bin/sh
#
# Called from udev
#
# Attempt to mount any added block devices and umount any removed devices
#
# This way ripped from mickledore poky with some modifications

MOUNT_BASE="/run/media/"
MOUNT="/bin/mount"
UMOUNT="/bin/umount"

for line in `grep -h -v ^# /etc/udev/mount.ignorelist /etc/udev/mount.ignorelist.d/*`
do
        if [ ` expr match "$DEVNAME" "$line" ` -gt 0 ];
        then
                logger "udev/mount.sh" "[$DEVNAME] is marked to ignore"
                exit 0
        fi
done

automount() {
        name="`basename "$DEVNAME"`"

        $MOUNT $DEVNAME 2> /dev/null

        # If the device isn't mounted at this point, it isn't
        # configured in fstab
        grep -q "^$DEVNAME " /proc/mounts && return

        # Get the unique name for mount point
        get_label_name "${DEVNAME}"

        # Only go for auto-mounting when the device has been cleaned up in remove
        # or has not been identified yet
        if [ -e "/tmp/.automount-$basename" ]; then
                logger "mount.sh/automount" "[$MOUNT_BASE/name$] is already cached"
                return
        fi

        ! test -d "$MOUNT_BASE/$name" && mkdir -p "$MOUNT_BASE/$name"
        # Silent util-linux's version of mounting auto
        if [ "x`readlink $MOUNT`" = "x/bin/mount.util-linux" ] ;
        then
                MOUNT="$MOUNT -o silent"
        fi

        # If filesystem type is vfat, change the ownership group to 'disk', and
        # grant it with  w/r/x permissions.
        case $ID_FS_TYPE in
                vfat|fat)
                        MOUNT="$MOUNT -o umask=007,gid=`awk -F':' '/^disk/{print $3}' /etc/group`"
                        ;;
                swap)
                        return ;;
                lvm*|LVM*)
                        return ;;
                        # TODO
                        *)
                        ;;
        esac

        if ! $MOUNT -t auto $DEVNAME "$MOUNT_BASE/$name"
        then
                logger "mount.sh/automount" "$MOUNT -t auto $DEVNAME \"$MOUNT_BASE/$name\" failed!"
                rm_dir "$MOUNT_BASE/$name"
        else
                logger "mount.sh/automount" "Auto-mount of [$MOUNT_BASE/$name] successful"
                # The actual device might not be present in the remove event so blkid cannot
                # be used to calculate what name was generated here. Simply save the mount
                # name in our tmp file.
                echo "$MOUNT_BASE/$name" > "/tmp/.automount-$basename"
        fi
}

rm_dir() {
        # We do not want to rm -r populated directories
        if test "`find "$1" | wc -l | tr -d " "`" -lt 2 -a -d "$1"
        then
                ! test -z "$1" && rm -r "$1"
        else
                logger "mount.sh/automount" "Not removing non-empty directory [$1]"
        fi
}

get_label_name() {
        # Get the LABEL or PARTLABEL
        LABEL=`/sbin/blkid | grep "$1:" | grep -o 'LABEL=".*"' | cut -d '"' -f2`
        # If the $DEVNAME has a LABEL or a PARTLABEL
        if [ -n "$LABEL" ]; then
                name="${LABEL}"
        else
                name="USB Drive"
        fi

        n=1;
        prefix=$name
        while [ -d $MOUNT_BASE/$name ]
        do
                name=$prefix-$n
                ((n++))
        done
}

# No ID_FS_TYPE for cdrom device, yet it should be mounted
basename="`basename "$DEVNAME"`"
name=$basename
[ -e /sys/block/$basename/device/media ] && media_type=`cat /sys/block/$basename/device/media`

if [ "$ACTION" = "add" ] && [ -n "$DEVNAME" ] && [ -n "$ID_FS_TYPE" -o "$media_type" = "cdrom" ]; then
        # Note the root filesystem can show up as /dev/root in /proc/mounts,
        # so check the device number too
        if expr $MAJOR "*" 256 + $MINOR != `stat -c %d /`; then
                automount
        fi
fi

if [ "$ACTION" = "remove" ] || [ "$ACTION" = "change" ] && [ -x "$UMOUNT" ] && [ -n "$DEVNAME" ]; then
        tmpfile=`find /tmp | grep "\.automount-${basename}$"`
        if [ ! -e "/sys/$DEVPATH" -a -e "$tmpfile" ]; then
                logger "mount.sh/remove" "cleaning up $DEVNAME, was mounted by the auto-mounter"
                for mnt in `cat /proc/mounts | grep "$DEVNAME" | cut -f 2 -d " " `
                do
                        $UMOUNT $mnt
                done

                # Remove mount directory created by the auto-mounter
                # and clean up our tmp cache file
                rm_dir `cat $tmpfile`
                rm "$tmpfile"
        fi
fi
```

The udev rules are identical to that from poky. Unfortunately, every time I insert my USB drive I get a file created /run/media/LABEL​, upon when I run ls -la /run/media/LABEL​, I receive an error, ls: cannot access '/run/media/LABEL': Transport endpoint is not connected​.

I am on an old version of Yocto (Sumo), and am unable to upgrade.

Any ideas on what's going on?

Thank you,
Logan

[-- Attachment #2: Type: text/html, Size: 38192 bytes --]

^ permalink raw reply	[flat|nested] only message in thread
only message in thread, other threads:[~2023-10-09 15:36 UTC | newest]

Thread overview: (only message) (download: mbox.gz / follow: Atom feed)
-- links below jump to the message on this page --
2023-10-09 15:36 Auto-mount causing "transport endpoint is not connected error" Logan Grosz

