* Intermittent build failure where dwarfsrcfiles doesn't exist
@ 2023-08-08  6:10 Tom Isaacson
  2023-08-08  9:17 ` [yocto] " Richard Purdie
  0 siblings, 1 reply; 7+ messages in thread
From: Tom Isaacson @ 2023-08-08  6:10 UTC (permalink / raw)
  To: <yocto@lists.yoctoproject.org>

We've been using Dunfell for a while but recently I've started getting
an intermittent build failure from an app:
    ERROR: my-app-1.0.52-213f116 do_package: Fatal errors occurred in
subprocesses:
    [Errno 2] No such file or directory: 'dwarfsrcfiles':
'dwarfsrcfiles': Traceback (most recent call last):
     File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/lib/oe/utils.py",
line 280, in run
       ret = self._target(*self._args, **self._kwargs)
     File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/classes/package.bbclass",
line 405, in splitdebuginfo
        sources = source_info(file, d)
     File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/classes/package.bbclass",
line 353, in source_info
       output = subprocess.check_output(cmd, universal_newlines=True,
stderr=subprocess.STDOUT)
     File "/usr/lib/python3.7/subprocess.py", line 395, in check_output
       **kwargs).stdout
     File "/usr/lib/python3.7/subprocess.py", line 472, in run
       with Popen(*popenargs, **kwargs) as process:
     File "/usr/lib/python3.7/subprocess.py", line 775, in __init__
       restore_signals, start_new_session)
     File "/usr/lib/python3.7/subprocess.py", line 1522, in _execute_child
       raise child_exception_type(errno_num, err_msg, err_filename)
    FileNotFoundError: [Errno 2] No such file or directory:
'dwarfsrcfiles': 'dwarfsrcfiles'

I assumed this was a race condition, so following
https://docs.yoctoproject.org/3.1.26/dev-manual/dev-manual-common-tasks.html?highlight=parallel_make#debugging-parallel-make-races
I added:
    PARALLEL_MAKE = ""
to the app recipe, but it didn't seem to help. However, setting:
    PARALLEL_MAKE = "-j 20"
does seem to make it fail every time (rather than intermittently).

dwarfsrcfiles is being built and I can run it after the build fails.
I've upgraded to Kirkstone but I'm seeing the same problem. The recipe
isn't doing anything to the package step so I'm not sure why it's
running before dwarfsrcfiles is built. I can see īt's included in
poky/meta/classes/package.bbclass but since it's a dependency I would
have thought it has to be built before the packaging step can be done?

-- 
Tom Isaacson


^ permalink raw reply	[flat|nested] 7+ messages in thread
* Re: [yocto] Intermittent build failure where dwarfsrcfiles doesn't exist
  2023-08-08  6:10 Intermittent build failure where dwarfsrcfiles doesn't exist Tom Isaacson
@ 2023-08-08  9:17 ` Richard Purdie
  2023-08-10 21:22   ` Tom Isaacson
  0 siblings, 1 reply; 7+ messages in thread
From: Richard Purdie @ 2023-08-08  9:17 UTC (permalink / raw)
  To: Tom Isaacson, <yocto@lists.yoctoproject.org>

On Tue, 2023-08-08 at 18:10 +1200, Tom Isaacson wrote:
> We've been using Dunfell for a while but recently I've started getting
> an intermittent build failure from an app:
>     ERROR: my-app-1.0.52-213f116 do_package: Fatal errors occurred in
> subprocesses:
>     [Errno 2] No such file or directory: 'dwarfsrcfiles':
> 'dwarfsrcfiles': Traceback (most recent call last):
>      File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/lib/oe/utils.py",
> line 280, in run
>        ret = self._target(*self._args, **self._kwargs)
>      File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/classes/package.bbclass",
> line 405, in splitdebuginfo
>         sources = source_info(file, d)
>      File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/classes/package.bbclass",
> line 353, in source_info
>        output = subprocess.check_output(cmd, universal_newlines=True,
> stderr=subprocess.STDOUT)
>      File "/usr/lib/python3.7/subprocess.py", line 395, in check_output
>        **kwargs).stdout
>      File "/usr/lib/python3.7/subprocess.py", line 472, in run
>        with Popen(*popenargs, **kwargs) as process:
>      File "/usr/lib/python3.7/subprocess.py", line 775, in __init__
>        restore_signals, start_new_session)
>      File "/usr/lib/python3.7/subprocess.py", line 1522, in _execute_child
>        raise child_exception_type(errno_num, err_msg, err_filename)
>     FileNotFoundError: [Errno 2] No such file or directory:
> 'dwarfsrcfiles': 'dwarfsrcfiles'
> 
> I assumed this was a race condition, so following
> https://docs.yoctoproject.org/3.1.26/dev-manual/dev-manual-common-tasks.html?highlight=parallel_make#debugging-parallel-make-races
> I added:
>     PARALLEL_MAKE = ""
> to the app recipe, but it didn't seem to help. However, setting:
>     PARALLEL_MAKE = "-j 20"
> does seem to make it fail every time (rather than intermittently).
> 
> dwarfsrcfiles is being built and I can run it after the build fails.
> I've upgraded to Kirkstone but I'm seeing the same problem. The recipe
> isn't doing anything to the package step so I'm not sure why it's
> running before dwarfsrcfiles is built. I can see īt's included in
> poky/meta/classes/package.bbclass but since it's a dependency I would
> have thought it has to be built before the packaging step can be done?

Rather than a make race, it is probably a task race and something like
a missing task dependency.

Run something like "bitbake my-app -c package -g" and have a look at
task-depends.dot that is generated, see if there is a dependency
between my-app:do_package and dwarfsrcfiles-native:do_populate_sysroot.
It should come from PACKAGE_DEPENDS in package.bbclass.

Cheers,

Richard




^ permalink raw reply	[flat|nested] 7+ messages in thread
* Re: [yocto] Intermittent build failure where dwarfsrcfiles doesn't exist
  2023-08-08  9:17 ` [yocto] " Richard Purdie
@ 2023-08-10 21:22   ` Tom Isaacson
  2023-08-11  6:56     ` Richard Purdie
  0 siblings, 1 reply; 7+ messages in thread
From: Tom Isaacson @ 2023-08-10 21:22 UTC (permalink / raw)
  To: Richard Purdie, <yocto@lists.yoctoproject.org>

I tried the dependency graph but it was enormous and too hard to read.
I can see in log.do_package for my app:
NOTE: Direct dependencies are
['poky/meta/recipes-devtools/dwarfsrcfiles/dwarfsrcfiles.bb:do_populate_sysroot']
and it doesn't make any difference if I add "dwarfsrcfiles-native" as
a dependency in my app's recipe so I don't think it's a dependency
problem.

I've been trying to debug this (on Dunfell) but I've run into
something strange. I was trying to figure out which function was
responsible for copying the dwarfsrcfiles binary to my app's
recipe-sysroot-native directory (because that's what is missing when
it fails):
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot-native/usr/bin/dwarfsrcfiles

I've added some logging and I noticed in
poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/temp/log.do_populate_sysroot
that when rpath_replace() is called by
relocatable_binaries_preprocess() it does this:
DEBUG: Executing python function relocatable_binaries_preprocess
NOTE: relocatable_binaries_preprocess(): d = <bb.data_smart.DataSmart
object at 0x7fbb6b755e40>
NOTE: rpath_replace(path =
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir,
d = <bb.data_smart.DataSmart object at 0x7fbb6b755e40>)
NOTE: Processing directory
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/bin
DEBUG: Checking
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/bin
for binaries to process
NOTE: Processing directory
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/sbin
DEBUG: Checking
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/sbin
for binaries to process
NOTE: Processing directory
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/sbin
DEBUG: Checking
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/sbin
for binaries to process
NOTE: Processing directory
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/bin
DEBUG: Checking
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/bin
for binaries to process
NOTE: Processing directory
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/lib
DEBUG: Checking
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/lib
for binaries to process
NOTE: Processing directory
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/lib
DEBUG: Checking
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/lib
for binaries to process
NOTE: Processing directory
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/libexec
DEBUG: Checking
/home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/libexec
for binaries to process
DEBUG: Python function relocatable_binaries_preprocess finished

This seems totally wrong - two full paths are being combined to make a
path that can't possibly exist. Is this something to do with my setup?

I've just been doing this by adding debug output, but is there a guide
on how to debug this directly? I use VSCode.

Thanks.

On Tue, Aug 8, 2023 at 9:17 PM Richard Purdie
<richard.purdie@linuxfoundation.org> wrote:
>
> On Tue, 2023-08-08 at 18:10 +1200, Tom Isaacson wrote:
> > We've been using Dunfell for a while but recently I've started getting
> > an intermittent build failure from an app:
> >     ERROR: my-app-1.0.52-213f116 do_package: Fatal errors occurred in
> > subprocesses:
> >     [Errno 2] No such file or directory: 'dwarfsrcfiles':
> > 'dwarfsrcfiles': Traceback (most recent call last):
> >      File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/lib/oe/utils.py",
> > line 280, in run
> >        ret = self._target(*self._args, **self._kwargs)
> >      File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/classes/package.bbclass",
> > line 405, in splitdebuginfo
> >         sources = source_info(file, d)
> >      File "/var/lib/jenkins/workspace/la_meta-my-layer_check-build/my-yocto-sdk/poky/meta/classes/package.bbclass",
> > line 353, in source_info
> >        output = subprocess.check_output(cmd, universal_newlines=True,
> > stderr=subprocess.STDOUT)
> >      File "/usr/lib/python3.7/subprocess.py", line 395, in check_output
> >        **kwargs).stdout
> >      File "/usr/lib/python3.7/subprocess.py", line 472, in run
> >        with Popen(*popenargs, **kwargs) as process:
> >      File "/usr/lib/python3.7/subprocess.py", line 775, in __init__
> >        restore_signals, start_new_session)
> >      File "/usr/lib/python3.7/subprocess.py", line 1522, in _execute_child
> >        raise child_exception_type(errno_num, err_msg, err_filename)
> >     FileNotFoundError: [Errno 2] No such file or directory:
> > 'dwarfsrcfiles': 'dwarfsrcfiles'
> >
> > I assumed this was a race condition, so following
> > https://docs.yoctoproject.org/3.1.26/dev-manual/dev-manual-common-tasks.html?highlight=parallel_make#debugging-parallel-make-races
> > I added:
> >     PARALLEL_MAKE = ""
> > to the app recipe, but it didn't seem to help. However, setting:
> >     PARALLEL_MAKE = "-j 20"
> > does seem to make it fail every time (rather than intermittently).
> >
> > dwarfsrcfiles is being built and I can run it after the build fails.
> > I've upgraded to Kirkstone but I'm seeing the same problem. The recipe
> > isn't doing anything to the package step so I'm not sure why it's
> > running before dwarfsrcfiles is built. I can see īt's included in
> > poky/meta/classes/package.bbclass but since it's a dependency I would
> > have thought it has to be built before the packaging step can be done?
>
> Rather than a make race, it is probably a task race and something like
> a missing task dependency.
>
> Run something like "bitbake my-app -c package -g" and have a look at
> task-depends.dot that is generated, see if there is a dependency
> between my-app:do_package and dwarfsrcfiles-native:do_populate_sysroot.
> It should come from PACKAGE_DEPENDS in package.bbclass.
>
> Cheers,
>
> Richard
>
>


-- 
Tom Isaacson


^ permalink raw reply	[flat|nested] 7+ messages in thread
* Re: [yocto] Intermittent build failure where dwarfsrcfiles doesn't exist
  2023-08-10 21:22   ` Tom Isaacson
@ 2023-08-11  6:56     ` Richard Purdie
  2023-08-11 19:50       ` Tom Isaacson
  0 siblings, 1 reply; 7+ messages in thread
From: Richard Purdie @ 2023-08-11  6:56 UTC (permalink / raw)
  To: Tom Isaacson, <yocto@lists.yoctoproject.org>

On Fri, 2023-08-11 at 09:22 +1200, Tom Isaacson wrote:
> DEBUG: Checking
> /home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/libexec
> for binaries to process
> DEBUG: Python function relocatable_binaries_preprocess finished
> 
> This seems totally wrong - two full paths are being combined to make a
> path that can't possibly exist. Is this something to do with my setup?

No, those paths look correct. When it builds native sstate objects,
you'd expect to see path duplication like that.

https://docs.yoctoproject.org/ref-manual/faq.html#why-do-bindir-and-libdir-have-strange-values-for-native-recipes

Cheers,

Richard


^ permalink raw reply	[flat|nested] 7+ messages in thread
* Re: [yocto] Intermittent build failure where dwarfsrcfiles doesn't exist
  2023-08-11  6:56     ` Richard Purdie
@ 2023-08-11 19:50       ` Tom Isaacson
  2023-08-11 21:11         ` Richard Purdie
  0 siblings, 1 reply; 7+ messages in thread
From: Tom Isaacson @ 2023-08-11 19:50 UTC (permalink / raw)
  To: Richard Purdie; +Cc: <yocto@lists.yoctoproject.org>

My bad. Ok, so:
* What function is responsible for copying the dwarfsrcfiles binary to
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot-native/usr/bin/dwarfsrcfiles?
* When the build completes the dwarfsrcfiles binary is present (even
if it got there too late). Why, if I rerun the build with no changes,
does it get removed and recopied?
* I asked before, but I've just been doing this by adding debug
output, but is there a guide on how to debug this directly? I can't
figure out how to step into the Python code directly. I use VSCode.

Thanks.

On Fri, Aug 11, 2023 at 6:56 PM Richard Purdie
<richard.purdie@linuxfoundation.org> wrote:
>
> On Fri, 2023-08-11 at 09:22 +1200, Tom Isaacson wrote:
> > DEBUG: Checking
> > /home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/sysroot-destdir//home/tom/Documents/Bitbucket/my-app/my-yocto-sdk/poky/build/tmp/work/x86_64-linux/dwarfsrcfiles-native/1.0-r0/recipe-sysroot-native/usr/libexec
> > for binaries to process
> > DEBUG: Python function relocatable_binaries_preprocess finished
> >
> > This seems totally wrong - two full paths are being combined to make a
> > path that can't possibly exist. Is this something to do with my setup?
>
> No, those paths look correct. When it builds native sstate objects,
> you'd expect to see path duplication like that.
>
> https://docs.yoctoproject.org/ref-manual/faq.html#why-do-bindir-and-libdir-have-strange-values-for-native-recipes
>
> Cheers,
>
> Richard



-- 
Tom Isaacson


^ permalink raw reply	[flat|nested] 7+ messages in thread
* Re: [yocto] Intermittent build failure where dwarfsrcfiles doesn't exist
  2023-08-11 19:50       ` Tom Isaacson
@ 2023-08-11 21:11         ` Richard Purdie
  2023-08-14  3:01           ` Tom Isaacson
  0 siblings, 1 reply; 7+ messages in thread
From: Richard Purdie @ 2023-08-11 21:11 UTC (permalink / raw)
  To: Tom Isaacson; +Cc: <yocto@lists.yoctoproject.org>

On Sat, 2023-08-12 at 07:50 +1200, Tom Isaacson wrote:
> My bad. Ok, so:
> * What function is responsible for copying the dwarfsrcfiles binary to
> poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot-native/usr/bin/dwarfsrcfiles?

It would come from the extend_recipe_sysroot function in
staging.bbclass.

You will see this function being called in various tasks as it will
show in logs in WORKDIR/temp/log.do_*

> * When the build completes the dwarfsrcfiles binary is present (even
> if it got there too late). Why, if I rerun the build with no changes,
> does it get removed and recopied?

There are a number of reasons, the example that comes to mine readily
is code which removes things it thinks are now invalid and then
installs new versions of them.

For example if the taskhash of dwarfsrcfiles changes (e.g. it's code
changed), it would rebuild it, then update copies in any recipe's
sysroot that depended on it.

> * I asked before, but I've just been doing this by adding debug
> output, but is there a guide on how to debug this directly? I can't
> figure out how to step into the Python code directly. I use VSCode.

I'm not ignoring the question, I simply don't know. I don't use VSCode.
I'm an old school C/kernel person who uses printk (or bb.warn() in
the bitbake case) to debug things.

Personally, I'd start with looking at the logs for my-app, see when
dwardsrc-files is being added or removed from the sysroot. The logs
should indicate that.

Removal could also happen at build setup time where bitbake prints
messages about removing things in which case the removal wouldn't be in
the recipes logs and isn't well logged, that code is central.

I'm doing my best to at least give you some answers, I'm afraid I don't
have them all, or tons of time to spend on this so I'm doing the best I
can. I'm assuming some answers are better than none, particularly if
you're looking at something you think is abnormal but really isn't.

I hope you can figure it out! If/as/when you do, help documenting it so
the next person can know what you wish was documented would be helpful
btw!

Cheers,

Richard





^ permalink raw reply	[flat|nested] 7+ messages in thread
* Re: [yocto] Intermittent build failure where dwarfsrcfiles doesn't exist
  2023-08-11 21:11         ` Richard Purdie
@ 2023-08-14  3:01           ` Tom Isaacson
  0 siblings, 0 replies; 7+ messages in thread
From: Tom Isaacson @ 2023-08-14  3:01 UTC (permalink / raw)
  To: Richard Purdie; +Cc: <yocto@lists.yoctoproject.org>

Sorry, I thought you'd missed it. I appreciate the help you've
provided. I'm trying to learn more about Yocto so I can contribute. My
first patch has been rejected twice now because I'm still trying to
get the hang of emailing patches and I have some improvements for
devtool coming.

Some progress. By looking at the logs I found in
WORKDIR/temp/log.do_prepare_recipe_sysroot the line:
    DEBUG: Removing manifest:
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot/usr/include/
    DEBUG: Removing manifest:
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot/usr/share/
    DEBUG: Removing manifest:
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot/usr/lib/
    DEBUG: Removing manifest:
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot/usr/
Every time I did a build the whole directory was being deleted. I
searched up from here for "stale" and found:
    NOTE: breakpad-native exists in sysroot, but is stale
(breakpad-native.8f0ddd03590cd9de4ac792a3a9bf1683a19767029fc1e81b3004c4aea8624a2f
vs. breakpad-native.652752786bdc3761978980d1e588e3281de1d8980a6bc81080ad2585932d4849),
removing.
Note this is just rerunning the build, I haven't changed anything.

By adding some logging I found sstate_clean_manifest() was being
called with a manifest file:
    NOTE: sstate_clean_manifest(manifest =
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot-native/installeddeps/breakpad-native.8f0ddd03590cd9de4ac792a3a9bf1683a19767029fc1e81b3004c4aea8624a2f)+
Checking the contents of the new file showed the manifest included
those directories at the bottom:
    recipe-sysroot-native/usr/include/
    recipe-sysroot-native/usr/share/
    recipe-sysroot-native/usr/lib/
    recipe-sysroot-native/usr/bin/
    recipe-sysroot-native/usr/

Now by default Dunfell includes Breakpad v1.10.0 but for some reason a
colleague had added a .bbappend file that set SRCREV_breakpad to a
commit almost a year before this release. Unfortunately he's left and
the comment wasn't helpful so I removed that. I no longer see
dwarfsrcfiles being deleted so once the build works it seems stable.

However:
* The manifest file for breakpad.native still contains those
directories and I can't figure out where it gets created - the only
reference to the installeddeps directory is in staging.bbclass and
that seems to only read the manifest, not create it.
* Still doesn't explain why dwarfsrcfiles sometimes isn't copied to
poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot-native/usr/bin/dwarfsrcfiles
in time. This happens on my CI build a lot because it's starting with
a clean directory.

On Sat, Aug 12, 2023 at 9:11 AM Richard Purdie
<richard.purdie@linuxfoundation.org> wrote:
>
> On Sat, 2023-08-12 at 07:50 +1200, Tom Isaacson wrote:
> > My bad. Ok, so:
> > * What function is responsible for copying the dwarfsrcfiles binary to
> > poky/build/tmp/work/oclea_cv25-oclea-linux/my-app/1.0.53-8c74bcd/recipe-sysroot-native/usr/bin/dwarfsrcfiles?
>
> It would come from the extend_recipe_sysroot function in
> staging.bbclass.
>
> You will see this function being called in various tasks as it will
> show in logs in WORKDIR/temp/log.do_*
>
> > * When the build completes the dwarfsrcfiles binary is present (even
> > if it got there too late). Why, if I rerun the build with no changes,
> > does it get removed and recopied?
>
> There are a number of reasons, the example that comes to mine readily
> is code which removes things it thinks are now invalid and then
> installs new versions of them.
>
> For example if the taskhash of dwarfsrcfiles changes (e.g. it's code
> changed), it would rebuild it, then update copies in any recipe's
> sysroot that depended on it.
>
> > * I asked before, but I've just been doing this by adding debug
> > output, but is there a guide on how to debug this directly? I can't
> > figure out how to step into the Python code directly. I use VSCode.
>
> I'm not ignoring the question, I simply don't know. I don't use VSCode.
> I'm an old school C/kernel person who uses printk (or bb.warn() in
> the bitbake case) to debug things.
>
> Personally, I'd start with looking at the logs for my-app, see when
> dwardsrc-files is being added or removed from the sysroot. The logs
> should indicate that.
>
> Removal could also happen at build setup time where bitbake prints
> messages about removing things in which case the removal wouldn't be in
> the recipes logs and isn't well logged, that code is central.
>
> I'm doing my best to at least give you some answers, I'm afraid I don't
> have them all, or tons of time to spend on this so I'm doing the best I
> can. I'm assuming some answers are better than none, particularly if
> you're looking at something you think is abnormal but really isn't.
>
> I hope you can figure it out! If/as/when you do, help documenting it so
> the next person can know what you wish was documented would be helpful
> btw!
>
> Cheers,
>
> Richard
>
>
>


-- 
Tom Isaacson


^ permalink raw reply	[flat|nested] 7+ messages in thread
end of thread, other threads:[~2023-08-14  3:01 UTC | newest]

Thread overview: 7+ messages (download: mbox.gz / follow: Atom feed)
-- links below jump to the message on this page --
2023-08-08  6:10 Intermittent build failure where dwarfsrcfiles doesn't exist Tom Isaacson
2023-08-08  9:17 ` [yocto] " Richard Purdie
2023-08-10 21:22   ` Tom Isaacson
2023-08-11  6:56     ` Richard Purdie
2023-08-11 19:50       ` Tom Isaacson
2023-08-11 21:11         ` Richard Purdie
2023-08-14  3:01           ` Tom Isaacson

