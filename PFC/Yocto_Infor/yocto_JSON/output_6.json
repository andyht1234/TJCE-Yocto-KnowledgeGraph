[
    "* Run generated executable in cmake recipe #cmake #kirkstone #make #native #yocto\n@ 2023-10-19 15:21 Darek Konopka\n  2023-10-19 15:58 ` [yocto] \" Adrian Freihofer\n  0 siblings, 1 reply; 3+ messages in thread\nFrom: Darek Konopka @ 2023-10-19 15:21 UTC (permalink / raw)\n  To: yocto\n\n[-- Attachment #1: Type: text/plain, Size: 1038 bytes --]\n\nHello all,\n\nSo I have a cmake project that uses an executable generated from a cmake subproject.\nMy architecture is as such\n├── ProjectA\n├── projecta_1.0.bb ( http://projecta_1.0.bb/ )\n├── files\n├── ProjectA\n├── CMakeLists.txt\n├──  ProjectB\n├── CMakeLists.txt\nMy recipe is a standard recipe that inherits pkgconfig cmake\nThe issue that occurs is that when manually building ProjectA natively it builds as expected, but when building it with yocto, during the do_compile for ProjectA, it says it is missing the executable generated by ProjectB located in /usr/bin/ProjBEXE (this executable is needed in order to compile ProjectA).\n\nWhat did work is creating a projectb-native recipe that runs cmake-native, and then have projecta depend on it, but I was wondering, is there a way to have projecta_1.0.bb ( http://projecta_1.0.bb/ ) build the executable and use it within its own cmake? Perhaps making projectB a package to have projectA use it?\nNOTE: I am using yocto kirkstone\n\n[-- Attachment #2: Type: text/html, Size: 4125 bytes --]\n\n^ permalink raw reply\t[flat|nested] 3+ messages in thread",
    "* Re: [yocto] Run generated executable in cmake recipe #cmake #kirkstone #make #native #yocto\n  2023-10-19 15:21 Run generated executable in cmake recipe #cmake #kirkstone #make #native #yocto Darek Konopka\n@ 2023-10-19 15:58 ` Adrian Freihofer\n  2023-10-20 15:40   ` Ross Burton\n  0 siblings, 1 reply; 3+ messages in thread\nFrom: Adrian Freihofer @ 2023-10-19 15:58 UTC (permalink / raw)\n  To: Darek Konopka; +Cc: Yocto-mailing-list\n\n[-- Attachment #1: Type: text/plain, Size: 2740 bytes --]\n\nHi Darek\n\nMaking the recipe compiling for cross and native and adding a DEPENDS from\ncross to native seems to be the cleanest and most Yocto-ish way to me.\n\nAlternatively this patch would allow to run cross compiled executables with\nQemu in the cmake project\nhttps://git.yoctoproject.org/poky-contrib/commit/?h=adrianf/devtool-ide&id=6c63df973d9530ecabc9480f8ba2aba3ff93952f.\nBut that's not the most common approach.\n\nIt's also possible to hack a cmake script which allows to pass a native\ntool-chain file for B. But this approach needs some hacks because cmake is\ndesigned to work with one tool-chain file only. I did that for a special\nuse case, but I'm not aware of a public example.\n\nRegards,\nAdrian\n\n\n\nDarek Konopka <kono6886@kettering.edu> schrieb am Do., 19. Okt. 2023, 17:21:\n\n> Hello all,\n>\n> So I have a cmake project that uses an executable generated from a cmake\n> subproject.\n> My architecture is as such\n>     ├── ProjectA\n>           ├── projecta_1.0.bb\n>           ├── files\n>                ├── ProjectA\n>                      ├── CMakeLists.txt\n>                      ├──  ProjectB\n>                          ├── CMakeLists.txt\n> My recipe is a standard recipe that inherits pkgconfig cmake\n> The issue that occurs is that when manually building ProjectA natively it\n> builds as expected, but when building it with yocto, during the do_compile\n> for ProjectA, it says it is missing the executable generated by ProjectB\n> located in /usr/bin/ProjBEXE (this executable is needed in order to compile\n> ProjectA).\n>\n> What did work is creating a projectb-native recipe that runs cmake-native,\n> and then have projecta depend on it, but I was wondering, is there a way to\n> have projecta_1.0.bb build the executable and use it within its own\n> cmake? Perhaps making projectB a package to have projectA use it?\n> NOTE: I am using yocto kirkstone\n>\n> -=-=-=-=-=-=-=-=-=-=-=-\n> Links: You receive all messages sent to this group.\n> View/Reply Online (#61419):\n> https://lists.yoctoproject.org/g/yocto/message/61419\n> Mute This Topic: https://lists.yoctoproject.org/mt/102062177/4454582\n> Mute #native:https://lists.yoctoproject.org/g/yocto/mutehashtag/native\n> Mute #yocto:https://lists.yoctoproject.org/g/yocto/mutehashtag/yocto\n> Mute #cmake:https://lists.yoctoproject.org/g/yocto/mutehashtag/cmake\n> Mute #kirkstone:\n> https://lists.yoctoproject.org/g/yocto/mutehashtag/kirkstone\n> Mute #make:https://lists.yoctoproject.org/g/yocto/mutehashtag/make\n> Group Owner: yocto+owner@lists.yoctoproject.org\n> Unsubscribe: https://lists.yoctoproject.org/g/yocto/unsub [\n> adrian.freihofer@gmail.com]\n> -=-=-=-=-=-=-=-=-=-=-=-\n>\n>\n\n[-- Attachment #2: Type: text/html, Size: 6909 bytes --]\n\n^ permalink raw reply\t[flat|nested] 3+ messages in thread",
    "* Re: [yocto] Run generated executable in cmake recipe #cmake #kirkstone #make #native #yocto\n  2023-10-19 15:58 ` [yocto] \" Adrian Freihofer\n@ 2023-10-20 15:40   ` Ross Burton\n  0 siblings, 0 replies; 3+ messages in thread\nFrom: Ross Burton @ 2023-10-20 15:40 UTC (permalink / raw)\n  To: Darek Konopka; +Cc: Yocto-mailing-list, adrian.freihofer\n\nOn 19 Oct 2023, at 16:58, Adrian Freihofer via lists.yoctoproject.org <adrian.freihofer=gmail.com@lists.yoctoproject.org> wrote:\n> Making the recipe compiling for cross and native and adding a DEPENDS from cross to native seems to be the cleanest and most Yocto-ish way to me.\n\nAgreed, there’s plenty of prior art in oe-core that does this.\n\n> Alternatively this patch would allow to run cross compiled executables with Qemu in the cmake project https://git.yoctoproject.org/poky-contrib/commit/?h=adrianf/devtool-ide&id=6c63df973d9530ecabc9480f8ba2aba3ff93952f. But that's not the most common approach.\n\nThe downside of this is that in a situation where qemu-user doesn’t work, you can’t build the recipe.  So I’d still recommend a native recipe in this case, because as Adrian said CMake just does not support the ability to build a single binary with the native tools for use in the build.\n\nThis is one of many reasons why I dislike CMake: it’s actively hostile for cross compiling. The toolchain support looks good at first, but the ability to easily say “build this binary with the host compiler so I can run it during the build” is important and absolutely missing in CMake.\n\nRoss\n\n^ permalink raw reply\t[flat|nested] 3+ messages in thread",
    "end of thread, other threads:[~2023-10-20 15:40 UTC | newest]\n\nThread overview: 3+ messages (download: mbox.gz / follow: Atom feed)\n-- links below jump to the message on this page --\n2023-10-19 15:21 Run generated executable in cmake recipe #cmake #kirkstone #make #native #yocto Darek Konopka\n2023-10-19 15:58 ` [yocto] \" Adrian Freihofer\n2023-10-20 15:40   ` Ross Burton\n"
]