* testimage.bbclass - error in running standard test on a target device
@ 2022-09-22  7:20 bahugunaayush8
  0 siblings, 0 replies; 2+ messages in thread
From: bahugunaayush8 @ 2022-09-22  7:20 UTC (permalink / raw)
  To: yocto

[-- Attachment #1: Type: text/plain, Size: 8133 bytes --]

Hi Friends,
I am new to this technology, please let me know if i missed any detail that is required to make my query more understandable . I am trying standard test on target device using TEST_TARGET = "simpleremote" ,
i have followed following steps on the given link - https://wiki.yoctoproject.org/wiki/BSP_Test_Plan
I am building core-image-weston on imx6 device.
I am building "core-image-weston" on "imx6" I ran command -- bitbake core-image-weston -c testimage
I got following logs---

NOTE: ----------------------------------------------------------------------
NOTE: Ran 61 tests in 438.855s
NOTE: FAILED
NOTE:  (failures=2, errors=1, skipped=16)
ERROR: Error executing a python function in exec_python_func() autogenerated:

The stack trace of python calls that resulted in this exception/failure was:
File: 'exec_python_func() autogenerated', lineno: 2, function: <module>
0001:
*** 0002:do_testimage(d)
0003:
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/classes/testimage.bbclass', lineno: 114, function: do_testimage
0110:    netstat -an
0111:}
0112:
0113:python do_testimage() {
*** 0114:   testimage_main(d)
0115:}
0116:
0117:addtask testimage
0118:do_testimage[nostamp] = "1"
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/classes/testimage.bbclass', lineno: 320, function: testimage_main
0316:
0317:    # Show results (if we have them)
0318:    if not results:
0319:        bb.fatal('%s - FAILED - tests were interrupted during execution' % pn, forcelog=True)
*** 0320:    configuration = get_testimage_configuration(d, 'runtime', machine)
0321:    results.logDetails(get_testimage_json_result_dir(d),
0322:                       configuration,
0323:                       get_testimage_result_id(configuration),
0324:                       dump_streams=d.getVar('TESTREPORT_FULLLOGS'))
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/classes/testimage.bbclass', lineno: 139, function: get_testimage_configuration
0135:                    'IMAGE_BASENAME': d.getVar("IMAGE_BASENAME"),
0136:                    'IMAGE_PKGTYPE': d.getVar("IMAGE_PKGTYPE"),
0137:                    'STARTTIME': d.getVar("DATETIME"),
0138:                    'HOST_DISTRO': oe.lsb.distro_identifier().replace(' ', '-'),
*** 0139:                    'LAYERS': get_layers(d.getVar("BBLAYERS"))}
0140:    return configuration
0141:get_testimage_configuration[vardepsexclude] = "DATETIME"
0142:
0143:def get_testimage_json_result_dir(d):
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/lib/oeqa/utils/metadata.py', lineno: 97, function: get_layers
0093:    """Returns layer information in dict format"""
0094:    layer_dict = OrderedDict()
0095:    for layer in layers.split():
0096:        layer_name = os.path.basename(layer)
*** 0097:        layer_dict[layer_name] = git_rev_info(layer)
0098:    return layer_dict
0099:
0100:def write_metadata_file(file_path, metadata):
0101:    """ Writes metadata to a XML file in directory. """
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/lib/oeqa/utils/metadata.py', lineno: 84, function: git_rev_info
0080:    try:
0081:        repo = Repo(path, search_parent_directories=True)
0082:    except (InvalidGitRepositoryError, NoSuchPathError):
0083:        return info
*** 0084:    info['commit'] = repo.head.commit.hexsha
0085:    info['commit_count'] = repo.head.commit.count()
0086:    try:
0087:        info['branch'] = repo.active_branch.name
0088:    except TypeError:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 197, function: _get_commit
0193:        """
0194:        :return:
0195:            Commit object we point to, works for detached and non-detached
0196:            SymbolicReferences. The symbolic reference will be dereferenced recursively."""
*** 0197:        obj = self._get_object()
0198:        if obj.type == 'tag':
0199:            obj = obj.object
0200:        # END dereference tag
0201:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 190, function: _get_object
0186:            The object our ref currently refers to. Refs can be cached, they will
0187:            always point to the actual object as it gets re-created on each query"""
0188:        # have to be dynamic here as we may be a tag which can point to anything
0189:        # Our path will be resolved to the hexsha which will be used accordingly
*** 0190:        return Object.new_from_sha(self.repo, hex_to_bin(self.dereference_recursive(self.repo, self.path)))
0191:
0192:    def _get_commit(self):
0193:        """
0194:        :return:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 132, function: dereference_recursive
0128:        :return: hexsha stored in the reference at the given ref_path, recursively dereferencing all
0129:            intermediate references as required
0130:        :param repo: the repository containing the reference at ref_path"""
0131:        while True:
*** 0132:            hexsha, ref_path = cls._get_ref_info(repo, ref_path)
0133:            if hexsha is not None:
0134:                return hexsha
0135:        # END recursive dereferencing
0136:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 181, function: _get_ref_info
0177:    def _get_ref_info(cls, repo, ref_path):
0178:        """Return: (str(sha), str(target_ref_path)) if available, the sha the file at
0179:        rela_path points to, or None. target_ref_path is the reference we
0180:        point to, or None"""
*** 0181:        return cls._get_ref_info_helper(repo, ref_path)
0182:
0183:    def _get_object(self):
0184:        """
0185:        :return:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 164, function: _get_ref_info_helper
0160:                break
0161:            # END for each packed ref
0162:        # END handle packed refs
0163:        if tokens is None:
*** 0164:            raise ValueError("Reference at %r does not exist" % ref_path)
0165:
0166:        # is it a reference ?
0167:        if tokens[0] == 'ref:':
0168:            return (None, tokens[1])
Exception: ValueError: Reference at 'refs/heads/yocto_imx6_rel' does not exist

DEBUG: Python function do_testimage finished

I tried to resolve the problem but errors, and warming kept increasing. than I found , a testimage.bbclass - http://cgit.openembedded.org/openembedded-core/tree/meta/classes/testimage.bbclass?h=pyro ( http://cgit.openembedded.org/openembedded-core/tree/meta/classes/testimage.bbclass?h=pyro )
which had diffrence wrt my testimage.bbclass diffrence was - i
nherit meta_scm
python () {
if oe.types.boolean(d.getVar("TESTIMAGE_AUTO") or "False"):
bb.build.addtask("testimage", "do_build", "do_image_complete", d)
}

Later ,
i swap my testimage.bbclass with http://cgit.openembedded.org/openembedded-core/tree/meta/classes/testimage.bbclass?h=pyro ( http://cgit.openembedded.org/openembedded-core/tree/meta/classes/testimage.bbclass?h=pyro )
i know that the diffrence may be due to different version but still i tested.
now after running the task -                               bitbake core-image-weston -c testimage
do_testimage task have stopped at 99% , no, I am not getting any log, later i Swaped the earlier testimage.bbclass and still it gets stuck at 99%. I am not getting any logs in both cases ,

may i please get your help to resolve this issue, and cause of error

[-- Attachment #2: Type: text/html, Size: 13594 bytes --]

^ permalink raw reply	[flat|nested] 2+ messages in thread
* testimage.bbclass - error in running standard test on a target device
@ 2022-09-22  7:10 bahugunaayush8
  0 siblings, 0 replies; 2+ messages in thread
From: bahugunaayush8 @ 2022-09-22  7:10 UTC (permalink / raw)
  To: yocto

[-- Attachment #1: Type: text/plain, Size: 8010 bytes --]

Hi Friends,
I am new to this technology, please let me know if i missed any detail that is required to make my query more understandable . I am trying standard test on target device using TEST_TARGET = "simpleremote" ,
i have followed following steps on the given link - https://wiki.yoctoproject.org/wiki/BSP_Test_Plan
I am building core-image-weston on imx6 device.
I am building "core-image-weston" on "imx6" I ran command -- bitbake core-image-weston -c testimage
I got following logs---

NOTE: ----------------------------------------------------------------------
NOTE: Ran 61 tests in 438.855s
NOTE: FAILED
NOTE:  (failures=2, errors=1, skipped=16)
ERROR: Error executing a python function in exec_python_func() autogenerated:

The stack trace of python calls that resulted in this exception/failure was:
File: 'exec_python_func() autogenerated', lineno: 2, function: <module>
0001:
*** 0002:do_testimage(d)
0003:
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/classes/testimage.bbclass', lineno: 114, function: do_testimage
0110:    netstat -an
0111:}
0112:
0113:python do_testimage() {
*** 0114:   testimage_main(d)
0115:}
0116:
0117:addtask testimage
0118:do_testimage[nostamp] = "1"
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/classes/testimage.bbclass', lineno: 320, function: testimage_main
0316:
0317:    # Show results (if we have them)
0318:    if not results:
0319:        bb.fatal('%s - FAILED - tests were interrupted during execution' % pn, forcelog=True)
*** 0320:    configuration = get_testimage_configuration(d, 'runtime', machine)
0321:    results.logDetails(get_testimage_json_result_dir(d),
0322:                       configuration,
0323:                       get_testimage_result_id(configuration),
0324:                       dump_streams=d.getVar('TESTREPORT_FULLLOGS'))
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/classes/testimage.bbclass', lineno: 139, function: get_testimage_configuration
0135:                    'IMAGE_BASENAME': d.getVar("IMAGE_BASENAME"),
0136:                    'IMAGE_PKGTYPE': d.getVar("IMAGE_PKGTYPE"),
0137:                    'STARTTIME': d.getVar("DATETIME"),
0138:                    'HOST_DISTRO': oe.lsb.distro_identifier().replace(' ', '-'),
*** 0139:                    'LAYERS': get_layers(d.getVar("BBLAYERS"))}
0140:    return configuration
0141:get_testimage_configuration[vardepsexclude] = "DATETIME"
0142:
0143:def get_testimage_json_result_dir(d):
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/lib/oeqa/utils/metadata.py', lineno: 97, function: get_layers
0093:    """Returns layer information in dict format"""
0094:    layer_dict = OrderedDict()
0095:    for layer in layers.split():
0096:        layer_name = os.path.basename(layer)
*** 0097:        layer_dict[layer_name] = git_rev_info(layer)
0098:    return layer_dict
0099:
0100:def write_metadata_file(file_path, metadata):
0101:    """ Writes metadata to a XML file in directory. """
File: '/home/ss/imx6/yocto/OS_Linux_imx6/sources/poky/meta/lib/oeqa/utils/metadata.py', lineno: 84, function: git_rev_info
0080:    try:
0081:        repo = Repo(path, search_parent_directories=True)
0082:    except (InvalidGitRepositoryError, NoSuchPathError):
0083:        return info
*** 0084:    info['commit'] = repo.head.commit.hexsha
0085:    info['commit_count'] = repo.head.commit.count()
0086:    try:
0087:        info['branch'] = repo.active_branch.name
0088:    except TypeError:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 197, function: _get_commit
0193:        """
0194:        :return:
0195:            Commit object we point to, works for detached and non-detached
0196:            SymbolicReferences. The symbolic reference will be dereferenced recursively."""
*** 0197:        obj = self._get_object()
0198:        if obj.type == 'tag':
0199:            obj = obj.object
0200:        # END dereference tag
0201:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 190, function: _get_object
0186:            The object our ref currently refers to. Refs can be cached, they will
0187:            always point to the actual object as it gets re-created on each query"""
0188:        # have to be dynamic here as we may be a tag which can point to anything
0189:        # Our path will be resolved to the hexsha which will be used accordingly
*** 0190:        return Object.new_from_sha(self.repo, hex_to_bin(self.dereference_recursive(self.repo, self.path)))
0191:
0192:    def _get_commit(self):
0193:        """
0194:        :return:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 132, function: dereference_recursive
0128:        :return: hexsha stored in the reference at the given ref_path, recursively dereferencing all
0129:            intermediate references as required
0130:        :param repo: the repository containing the reference at ref_path"""
0131:        while True:
*** 0132:            hexsha, ref_path = cls._get_ref_info(repo, ref_path)
0133:            if hexsha is not None:
0134:                return hexsha
0135:        # END recursive dereferencing
0136:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 181, function: _get_ref_info
0177:    def _get_ref_info(cls, repo, ref_path):
0178:        """Return: (str(sha), str(target_ref_path)) if available, the sha the file at
0179:        rela_path points to, or None. target_ref_path is the reference we
0180:        point to, or None"""
*** 0181:        return cls._get_ref_info_helper(repo, ref_path)
0182:
0183:    def _get_object(self):
0184:        """
0185:        :return:
File: '/usr/lib/python3/dist-packages/git/refs/symbolic.py', lineno: 164, function: _get_ref_info_helper
0160:                break
0161:            # END for each packed ref
0162:        # END handle packed refs
0163:        if tokens is None:
*** 0164:            raise ValueError("Reference at %r does not exist" % ref_path)
0165:
0166:        # is it a reference ?
0167:        if tokens[0] == 'ref:':
0168:            return (None, tokens[1])
Exception: ValueError: Reference at 'refs/heads/yocto_imx6_rel' does not exist

DEBUG: Python function do_testimage finished

I tried to resolve the problem but errors, and warming kept increasing. than I found , a testimage.bbclass - http://cgit.openembedded.org/openembedded-core/tree/meta/classes/testimage.bbclass?h=pyro ( http://cgit.openembedded.org/openembedded-core/tree/meta/classes/testimage.bbclass?h=pyro )
which had diffrence wrt my testimage.bbclass diffrence was - i
nherit meta_scm
python () {
if oe.types.boolean(d.getVar("TESTIMAGE_AUTO") or "False"):
bb.build.addtask("testimage", "do_build", "do_image_complete", d)
}

Later ,
i swap my testimage.bbclass with http://cgit.openembedded.org/openembedded-core/tree/meta/classes/testimage.bbclass?h=pyro i know that the diffrence may be due to diffrent version but still i tested.
now after running the task --- bitbake core-image-weston -c testimage do_testimage task have stopped at 99% , no, I am not getting any log, later i Swaped the earlier testimage.bbclass and still it gets stuck at 99%. I am not getting any logs in both cases now As new to this technology ,

may i please get your help to resolve this issue, and root cause of it

[-- Attachment #2: Type: text/html, Size: 13287 bytes --]

^ permalink raw reply	[flat|nested] 2+ messages in thread
end of thread, other threads:[~2022-09-22  7:20 UTC | newest]

Thread overview: 2+ messages (download: mbox.gz / follow: Atom feed)
-- links below jump to the message on this page --
2022-09-22  7:20 testimage.bbclass - error in running standard test on a target device bahugunaayush8
  -- strict thread matches above, loose matches on Subject: below --
2022-09-22  7:10 bahugunaayush8

